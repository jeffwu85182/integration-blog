{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1545787679277},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1545787679277},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1545787679278},{"_id":"themes/landscape/README.md","hash":"37fae88639ef60d63bd0de22314d7cc4c5d94b07","modified":1545787679278},{"_id":"themes/landscape/_config.yml","hash":"79ac6b9ed6a4de5a21ea53fc3f5a3de92e2475ff","modified":1545787679278},{"_id":"themes/landscape/package.json","hash":"544f21a0b2c7034998b36ae94dba6e3e0f39f228","modified":1545787679287},{"_id":"source/_posts/2018-11-13-Reading-Enabling-Agility-with-Branch-By-Abstraction.markdown","hash":"31e418999e185700e3fc273e073509cd063ed377","modified":1545794886253},{"_id":"source/_posts/2018-11-29-blog-build-chrome-ringcentral-widgets-extension-for-crms.markdown","hash":"6d669f7e945e25f734257057dd95f65b8e655a3e","modified":1545794886253},{"_id":"source/_posts/2018-12-06-How-to-do-quick-revie-towards-tickets-and-bugs-before-release.markdown","hash":"1f4f22fec53c20159deb6037b30d1b8f5c79c84a","modified":1545794886254},{"_id":"source/_posts/2018-12-10-Reading_Code_Review_Best_Practices.md","hash":"e8f2e767147e391ffe37b564a6bec8119cc42442","modified":1545794886254},{"_id":"source/_posts/2018-12-10-blog-lets-create-some-glip-bots-with-python.markdown","hash":"9cb0fb06bd95ff3d23ee2a3bf8c09bb02790b3c2","modified":1545794886254},{"_id":"source/_posts/2018-12-10-why-progressive-web-app-is-the-future-of-client-app.md","hash":"86648860e99a736a4325dcb5846d157eb8b4cfd7","modified":1545794886254},{"_id":"source/_posts/2018-12-18-blog-a-more-complete-front-end-testing-strategy.md","hash":"fdb2ef8639eeb6ce4b8d4d2372e99f8edb26a4be","modified":1545794886254},{"_id":"source/_posts/2018-12-20-Reading-Working-Backwards-by-Werner-Vogels.md","hash":"2bd030072872300ba2aad608b972b05f3310bf0e","modified":1545794886254},{"_id":"source/_posts/2018-12-25-typeScript-intro-and-migrating.md","hash":"b8f95ce985ec33da6372bcb2f53221640dd98234","modified":1545794886253},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1545787679278},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1545787679279},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1545787679278},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1545787679279},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1545787679279},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1545787679279},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1545787679279},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1545787679279},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1545787679280},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1545787679280},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1545787679280},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1545787679280},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1545787679285},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1545787679285},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1545787679285},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1545787679286},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1545787679286},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1545787679286},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1545787679287},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1545787679287},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"d0d753d39038284d52b10e5075979cc97db9cd20","modified":1545787679280},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1545787679281},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"950ddd91db8718153b329b96dc14439ab8463ba5","modified":1545787679281},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1545787679281},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1545787679281},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"aad6312ac197d6c5aaf2104ac863d7eba46b772a","modified":1545787679281},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1545787679281},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"5abf77aec957d9445fc71a8310252f0013c84578","modified":1545787679282},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1545787679282},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"7e749050be126eadbc42decfbea75124ae430413","modified":1545787679282},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1545787679283},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1545787679284},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1545787679284},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1545787679284},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1545787679284},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1545787679284},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1545787679288},{"_id":"themes/landscape/source/css/_variables.styl","hash":"628e307579ea46b5928424313993f17b8d729e92","modified":1545787679292},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1545787679299},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1545787679304},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545787679300},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545787679300},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545787679301},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545787679300},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545787679301},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1545787679303},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545787679300},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1545787679304},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1545787679303},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1545787679282},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1545787679282},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1545787679283},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1545787679283},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1545787679283},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1545787679283},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1545787679288},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1545787679289},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1545787679289},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1545787679289},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1545787679290},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1545787679290},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1545787679290},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1545787679291},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1545787679291},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1545787679291},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1545787679292},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1545787679289},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1545787679293},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1545787679293},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545787679301},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545787679301},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545787679302},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1545787679302},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1545787679302},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1545787679302},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1545787679296},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1545787679296},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1545787679295},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1545787679299}],"Category":[{"name":"readingnote","_id":"cjq4mdvej0002tci59loytxff"},{"name":"blog","_id":"cjq4mdveo0006tci5uxoklsma"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"Reading: Enabling Agility with Branch By Abstraction by Mark J. Balbes, Ph.D.","date":"2018-11-13T15:31:07.000Z","_content":"\n[Article Link](https://adtmag.com/articles/2017/04/21/agile-branch-by-abstraction.aspx)\n\n#### Summary:\nTraditional workflow with version control often creates “islands of stability”, or feature/release specific branches that are tested amongst themselves. The longer these branches are in development, the harder it is to merge back into the master branch. In some cases, the divergence can be too great and the branch will stay forever to avoid the refactoring needed for the merge to happen, which hinders the concept of agile parallel development.  \nBranch by abstraction is a practice designed to solve these issue. It aims to allow parallel development of feature, release of different features in different times, refactors and features to be shared quickly, and can be beneficial to code design. The idea is simple: first you introduce the abstraction to encapsulate the new feature or the old feature to be refactored with a toggle to switch between old and new implementations, then you build or refactor behind the abstraction. This way, these new implementation can be quickly merged into master and shared among others because they can be turned off. After the new code is fully tested and hits production, then the old code and feature toggle can be removed if necessary.\nThe concept may appear to be big-design-up-front methodology that had failed before, but in practice, only just enough design has to be done, and the abstraction will have to evolve as more features are to be introduced into the code. As for deployment, since the new code is abstracted away and controlled by a toggle, merging in these new code should not be a problem to production releases. The new code can be quickly shared and tested, while the production builds will simply toggle them off.\n\n\n#### Reflection:\nThis article is very relatable to our team. Having a common code base that is shared among multiple production apps is not easy. Branching by abstraction provides a way for us to introduce features into the common library quickly and to be able to manage the releases of each app separately. I think in some ways we have been doing this already, where each module can be viewed as a layer of abstraction. I think through more layers of abstraction, we can have  more granular control over refactoring and new feature introductions. As we are moving towards a monorepo approach, I think this will be even more important to us, as we will be sharing new and refactored code even faster.\n","source":"_posts/2018-11-13-Reading-Enabling-Agility-with-Branch-By-Abstraction.markdown","raw":"---\nlayout: post\ntitle:  \"Reading: Enabling Agility with Branch By Abstraction by Mark J. Balbes, Ph.D.\"\ndate:   2018-11-13 23:31:07 +0800\ncategories: readingnote\n---\n\n[Article Link](https://adtmag.com/articles/2017/04/21/agile-branch-by-abstraction.aspx)\n\n#### Summary:\nTraditional workflow with version control often creates “islands of stability”, or feature/release specific branches that are tested amongst themselves. The longer these branches are in development, the harder it is to merge back into the master branch. In some cases, the divergence can be too great and the branch will stay forever to avoid the refactoring needed for the merge to happen, which hinders the concept of agile parallel development.  \nBranch by abstraction is a practice designed to solve these issue. It aims to allow parallel development of feature, release of different features in different times, refactors and features to be shared quickly, and can be beneficial to code design. The idea is simple: first you introduce the abstraction to encapsulate the new feature or the old feature to be refactored with a toggle to switch between old and new implementations, then you build or refactor behind the abstraction. This way, these new implementation can be quickly merged into master and shared among others because they can be turned off. After the new code is fully tested and hits production, then the old code and feature toggle can be removed if necessary.\nThe concept may appear to be big-design-up-front methodology that had failed before, but in practice, only just enough design has to be done, and the abstraction will have to evolve as more features are to be introduced into the code. As for deployment, since the new code is abstracted away and controlled by a toggle, merging in these new code should not be a problem to production releases. The new code can be quickly shared and tested, while the production builds will simply toggle them off.\n\n\n#### Reflection:\nThis article is very relatable to our team. Having a common code base that is shared among multiple production apps is not easy. Branching by abstraction provides a way for us to introduce features into the common library quickly and to be able to manage the releases of each app separately. I think in some ways we have been doing this already, where each module can be viewed as a layer of abstraction. I think through more layers of abstraction, we can have  more granular control over refactoring and new feature introductions. As we are moving towards a monorepo approach, I think this will be even more important to us, as we will be sharing new and refactored code even faster.\n","slug":"2018-11-13-Reading-Enabling-Agility-with-Branch-By-Abstraction","published":1,"updated":"2018-12-26T03:28:06.253Z","comments":1,"photos":[],"link":"","_id":"cjq4mdveb0000tci559jiv6id","content":"<p><a href=\"https://adtmag.com/articles/2017/04/21/agile-branch-by-abstraction.aspx\" target=\"_blank\" rel=\"noopener\">Article Link</a></p>\n<h4 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary:\"></a>Summary:</h4><p>Traditional workflow with version control often creates “islands of stability”, or feature/release specific branches that are tested amongst themselves. The longer these branches are in development, the harder it is to merge back into the master branch. In some cases, the divergence can be too great and the branch will stay forever to avoid the refactoring needed for the merge to happen, which hinders the concept of agile parallel development.<br>Branch by abstraction is a practice designed to solve these issue. It aims to allow parallel development of feature, release of different features in different times, refactors and features to be shared quickly, and can be beneficial to code design. The idea is simple: first you introduce the abstraction to encapsulate the new feature or the old feature to be refactored with a toggle to switch between old and new implementations, then you build or refactor behind the abstraction. This way, these new implementation can be quickly merged into master and shared among others because they can be turned off. After the new code is fully tested and hits production, then the old code and feature toggle can be removed if necessary.<br>The concept may appear to be big-design-up-front methodology that had failed before, but in practice, only just enough design has to be done, and the abstraction will have to evolve as more features are to be introduced into the code. As for deployment, since the new code is abstracted away and controlled by a toggle, merging in these new code should not be a problem to production releases. The new code can be quickly shared and tested, while the production builds will simply toggle them off.</p>\n<h4 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection:\"></a>Reflection:</h4><p>This article is very relatable to our team. Having a common code base that is shared among multiple production apps is not easy. Branching by abstraction provides a way for us to introduce features into the common library quickly and to be able to manage the releases of each app separately. I think in some ways we have been doing this already, where each module can be viewed as a layer of abstraction. I think through more layers of abstraction, we can have  more granular control over refactoring and new feature introductions. As we are moving towards a monorepo approach, I think this will be even more important to us, as we will be sharing new and refactored code even faster.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://adtmag.com/articles/2017/04/21/agile-branch-by-abstraction.aspx\" target=\"_blank\" rel=\"noopener\">Article Link</a></p>\n<h4 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary:\"></a>Summary:</h4><p>Traditional workflow with version control often creates “islands of stability”, or feature/release specific branches that are tested amongst themselves. The longer these branches are in development, the harder it is to merge back into the master branch. In some cases, the divergence can be too great and the branch will stay forever to avoid the refactoring needed for the merge to happen, which hinders the concept of agile parallel development.<br>Branch by abstraction is a practice designed to solve these issue. It aims to allow parallel development of feature, release of different features in different times, refactors and features to be shared quickly, and can be beneficial to code design. The idea is simple: first you introduce the abstraction to encapsulate the new feature or the old feature to be refactored with a toggle to switch between old and new implementations, then you build or refactor behind the abstraction. This way, these new implementation can be quickly merged into master and shared among others because they can be turned off. After the new code is fully tested and hits production, then the old code and feature toggle can be removed if necessary.<br>The concept may appear to be big-design-up-front methodology that had failed before, but in practice, only just enough design has to be done, and the abstraction will have to evolve as more features are to be introduced into the code. As for deployment, since the new code is abstracted away and controlled by a toggle, merging in these new code should not be a problem to production releases. The new code can be quickly shared and tested, while the production builds will simply toggle them off.</p>\n<h4 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection:\"></a>Reflection:</h4><p>This article is very relatable to our team. Having a common code base that is shared among multiple production apps is not easy. Branching by abstraction provides a way for us to introduce features into the common library quickly and to be able to manage the releases of each app separately. I think in some ways we have been doing this already, where each module can be viewed as a layer of abstraction. I think through more layers of abstraction, we can have  more granular control over refactoring and new feature introductions. As we are moving towards a monorepo approach, I think this will be even more important to us, as we will be sharing new and refactored code even faster.</p>\n"},{"layout":"post","title":"Build Chrome extension for CRMs with RingCentral Embeddable widgets","date":"2018-11-29T05:31:07.000Z","author":"Drake Zhao","_content":"\n![ ](https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/bb.jpg)\n\n## About RingCentral Embeddable widgets\n\nRingCentral Embeddable widgets is a powerful tool for CRMs, its core power is add click-to-call function, around this core function, it can extend CRM's communication workflow. And it can be easily integrated into CRM sites, even without official support, developer can still do the integration through building chrome extension.\n\n## Advanced features of these extensions could provide\n\n[Embbnux Ji](https://github.com/embbnux) has a tuturial: [Building Chrome Extension Integrations with RingCentral Embeddable](https://medium.com/ringcentral-developers/build-a-chrome-extension-with-ringcentral-embeddable-bb6faee808a3), with this tutorial, we could create Chrome extension for any site with RingCentral Embeddable.\n\nFor CRM sites, we may want to add more advanced features, like click-to-call buttons/links and all the third party features of our ringcentral-embeddable supported:\n\n- For CRM contact list, extension could add hover-to-show tooltip to show click-to-call button.\n\n![ ](https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-2.png)\n\n- For CRM contact info page, extension could add click-to-call button in proper positions.\n\n![ ](https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-3.png)\n\n- For CRM contact phone number text, extension could convert them to click-to-call link.\n\n![ ](https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-1.png)\n\n- Sync CRM contacts to our widgets after user authorization.\n\n![ ](https://github.com/zxdong262/insightly-embeddable-ringcentral-phone/raw/master/screenshots/insightly-4.png)\n\n- Sync call log to CRM automatically or manually.\n\n![ ](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hs6.png)\n\n- Check CRM contact activities from our widgets.\n\n![ ](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hs7.png)\n\n- Show CRM contact info panel when inbound/outbound call with CRM contact.\n\n![ ](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hubspot1.png)\n\n## Create extension with CLI tool\n\nTo minimize the effort to create these extensions, I created the CLI tool: [ringcentral-embeddable-extension-factory](https://github.com/ringcentral/ringcentral-embeddable-extension-factory)\n\nUse CLI tool to init a extension project will be like this:\n\n```bash\n# make sure you have npm@5.2+ installed\nnpx ringcentral-embeddable-extension-factory my-app\n```\n\n![ ](https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/cli.png)\n\nThen just follow the instruction inmy-app/README.md to build, test and develop the extension.\n\nI have a demo video to show this process.\n\n[https://youtu.be/2njQSk8x2K4](https://youtu.be/2njQSk8x2K4)\n\nAs you can see, before setting proper config/functions, it will work as a **Embeddable widgets** only, if you are satisfied with this, it is already done! If you want the extension to do the listed features above, you need more work to get there. The tutorial and examples would be a good place to start.\n\n## The Tutorial\n\nThis detailed tutorial will walk you through the process of creating Chrome RingCentral widgets extension for CRM.\n\n[https://ringcentral-tutorials.github.io/build-chrome-ringcentral-widgets-extension-for-crm/](https://ringcentral-tutorials.github.io/build-chrome-ringcentral-widgets-extension-for-crm/)\n\n## Realworld examples\n\nYou may get some ideas from these codes.\n\n- [hubspot-embeddable-ringcentral-phone (spa)](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone)\n- [insightly-embeddable-ringcentral-phone (spa)](https://github.com/zxdong262/insightly-embeddable-ringcentral-phone)\n- [redtail-embeddable-ringcentral-phone (non spa)](https://github.com/zxdong262/redtail-embeddable-ringcentral-phone)\n","source":"_posts/2018-11-29-blog-build-chrome-ringcentral-widgets-extension-for-crms.markdown","raw":"---\nlayout: post\ntitle:  \"Build Chrome extension for CRMs with RingCentral Embeddable widgets\"\ndate:   2018-11-29 13:31:07 +0800\ncategories: blog\nauthor: Drake Zhao\n---\n\n![ ](https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/bb.jpg)\n\n## About RingCentral Embeddable widgets\n\nRingCentral Embeddable widgets is a powerful tool for CRMs, its core power is add click-to-call function, around this core function, it can extend CRM's communication workflow. And it can be easily integrated into CRM sites, even without official support, developer can still do the integration through building chrome extension.\n\n## Advanced features of these extensions could provide\n\n[Embbnux Ji](https://github.com/embbnux) has a tuturial: [Building Chrome Extension Integrations with RingCentral Embeddable](https://medium.com/ringcentral-developers/build-a-chrome-extension-with-ringcentral-embeddable-bb6faee808a3), with this tutorial, we could create Chrome extension for any site with RingCentral Embeddable.\n\nFor CRM sites, we may want to add more advanced features, like click-to-call buttons/links and all the third party features of our ringcentral-embeddable supported:\n\n- For CRM contact list, extension could add hover-to-show tooltip to show click-to-call button.\n\n![ ](https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-2.png)\n\n- For CRM contact info page, extension could add click-to-call button in proper positions.\n\n![ ](https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-3.png)\n\n- For CRM contact phone number text, extension could convert them to click-to-call link.\n\n![ ](https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-1.png)\n\n- Sync CRM contacts to our widgets after user authorization.\n\n![ ](https://github.com/zxdong262/insightly-embeddable-ringcentral-phone/raw/master/screenshots/insightly-4.png)\n\n- Sync call log to CRM automatically or manually.\n\n![ ](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hs6.png)\n\n- Check CRM contact activities from our widgets.\n\n![ ](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hs7.png)\n\n- Show CRM contact info panel when inbound/outbound call with CRM contact.\n\n![ ](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hubspot1.png)\n\n## Create extension with CLI tool\n\nTo minimize the effort to create these extensions, I created the CLI tool: [ringcentral-embeddable-extension-factory](https://github.com/ringcentral/ringcentral-embeddable-extension-factory)\n\nUse CLI tool to init a extension project will be like this:\n\n```bash\n# make sure you have npm@5.2+ installed\nnpx ringcentral-embeddable-extension-factory my-app\n```\n\n![ ](https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/cli.png)\n\nThen just follow the instruction inmy-app/README.md to build, test and develop the extension.\n\nI have a demo video to show this process.\n\n[https://youtu.be/2njQSk8x2K4](https://youtu.be/2njQSk8x2K4)\n\nAs you can see, before setting proper config/functions, it will work as a **Embeddable widgets** only, if you are satisfied with this, it is already done! If you want the extension to do the listed features above, you need more work to get there. The tutorial and examples would be a good place to start.\n\n## The Tutorial\n\nThis detailed tutorial will walk you through the process of creating Chrome RingCentral widgets extension for CRM.\n\n[https://ringcentral-tutorials.github.io/build-chrome-ringcentral-widgets-extension-for-crm/](https://ringcentral-tutorials.github.io/build-chrome-ringcentral-widgets-extension-for-crm/)\n\n## Realworld examples\n\nYou may get some ideas from these codes.\n\n- [hubspot-embeddable-ringcentral-phone (spa)](https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone)\n- [insightly-embeddable-ringcentral-phone (spa)](https://github.com/zxdong262/insightly-embeddable-ringcentral-phone)\n- [redtail-embeddable-ringcentral-phone (non spa)](https://github.com/zxdong262/redtail-embeddable-ringcentral-phone)\n","slug":"2018-11-29-blog-build-chrome-ringcentral-widgets-extension-for-crms","published":1,"updated":"2018-12-26T03:28:06.253Z","comments":1,"photos":[],"link":"","_id":"cjq4mdveg0001tci54tz9g8ta","content":"<p><img src=\"https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/bb.jpg\" alt=\" \"></p>\n<h2 id=\"About-RingCentral-Embeddable-widgets\"><a href=\"#About-RingCentral-Embeddable-widgets\" class=\"headerlink\" title=\"About RingCentral Embeddable widgets\"></a>About RingCentral Embeddable widgets</h2><p>RingCentral Embeddable widgets is a powerful tool for CRMs, its core power is add click-to-call function, around this core function, it can extend CRM’s communication workflow. And it can be easily integrated into CRM sites, even without official support, developer can still do the integration through building chrome extension.</p>\n<h2 id=\"Advanced-features-of-these-extensions-could-provide\"><a href=\"#Advanced-features-of-these-extensions-could-provide\" class=\"headerlink\" title=\"Advanced features of these extensions could provide\"></a>Advanced features of these extensions could provide</h2><p><a href=\"https://github.com/embbnux\" target=\"_blank\" rel=\"noopener\">Embbnux Ji</a> has a tuturial: <a href=\"https://medium.com/ringcentral-developers/build-a-chrome-extension-with-ringcentral-embeddable-bb6faee808a3\" target=\"_blank\" rel=\"noopener\">Building Chrome Extension Integrations with RingCentral Embeddable</a>, with this tutorial, we could create Chrome extension for any site with RingCentral Embeddable.</p>\n<p>For CRM sites, we may want to add more advanced features, like click-to-call buttons/links and all the third party features of our ringcentral-embeddable supported:</p>\n<ul>\n<li>For CRM contact list, extension could add hover-to-show tooltip to show click-to-call button.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-2.png\" alt=\" \"></p>\n<ul>\n<li>For CRM contact info page, extension could add click-to-call button in proper positions.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-3.png\" alt=\" \"></p>\n<ul>\n<li>For CRM contact phone number text, extension could convert them to click-to-call link.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-1.png\" alt=\" \"></p>\n<ul>\n<li>Sync CRM contacts to our widgets after user authorization.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/insightly-embeddable-ringcentral-phone/raw/master/screenshots/insightly-4.png\" alt=\" \"></p>\n<ul>\n<li>Sync call log to CRM automatically or manually.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hs6.png\" alt=\" \"></p>\n<ul>\n<li>Check CRM contact activities from our widgets.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hs7.png\" alt=\" \"></p>\n<ul>\n<li>Show CRM contact info panel when inbound/outbound call with CRM contact.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hubspot1.png\" alt=\" \"></p>\n<h2 id=\"Create-extension-with-CLI-tool\"><a href=\"#Create-extension-with-CLI-tool\" class=\"headerlink\" title=\"Create extension with CLI tool\"></a>Create extension with CLI tool</h2><p>To minimize the effort to create these extensions, I created the CLI tool: <a href=\"https://github.com/ringcentral/ringcentral-embeddable-extension-factory\" target=\"_blank\" rel=\"noopener\">ringcentral-embeddable-extension-factory</a></p>\n<p>Use CLI tool to init a extension project will be like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># make sure you have npm@5.2+ installed</span></span><br><span class=\"line\">npx ringcentral-embeddable-extension-factory my-app</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/cli.png\" alt=\" \"></p>\n<p>Then just follow the instruction inmy-app/README.md to build, test and develop the extension.</p>\n<p>I have a demo video to show this process.</p>\n<p><a href=\"https://youtu.be/2njQSk8x2K4\" target=\"_blank\" rel=\"noopener\">https://youtu.be/2njQSk8x2K4</a></p>\n<p>As you can see, before setting proper config/functions, it will work as a <strong>Embeddable widgets</strong> only, if you are satisfied with this, it is already done! If you want the extension to do the listed features above, you need more work to get there. The tutorial and examples would be a good place to start.</p>\n<h2 id=\"The-Tutorial\"><a href=\"#The-Tutorial\" class=\"headerlink\" title=\"The Tutorial\"></a>The Tutorial</h2><p>This detailed tutorial will walk you through the process of creating Chrome RingCentral widgets extension for CRM.</p>\n<p><a href=\"https://ringcentral-tutorials.github.io/build-chrome-ringcentral-widgets-extension-for-crm/\" target=\"_blank\" rel=\"noopener\">https://ringcentral-tutorials.github.io/build-chrome-ringcentral-widgets-extension-for-crm/</a></p>\n<h2 id=\"Realworld-examples\"><a href=\"#Realworld-examples\" class=\"headerlink\" title=\"Realworld examples\"></a>Realworld examples</h2><p>You may get some ideas from these codes.</p>\n<ul>\n<li><a href=\"https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone\" target=\"_blank\" rel=\"noopener\">hubspot-embeddable-ringcentral-phone (spa)</a></li>\n<li><a href=\"https://github.com/zxdong262/insightly-embeddable-ringcentral-phone\" target=\"_blank\" rel=\"noopener\">insightly-embeddable-ringcentral-phone (spa)</a></li>\n<li><a href=\"https://github.com/zxdong262/redtail-embeddable-ringcentral-phone\" target=\"_blank\" rel=\"noopener\">redtail-embeddable-ringcentral-phone (non spa)</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://github.com/ringcentral/ringcentral-embeddable-extension-factory/raw/master/screenshots/bb.jpg\" alt=\" \"></p>\n<h2 id=\"About-RingCentral-Embeddable-widgets\"><a href=\"#About-RingCentral-Embeddable-widgets\" class=\"headerlink\" title=\"About RingCentral Embeddable widgets\"></a>About RingCentral Embeddable widgets</h2><p>RingCentral Embeddable widgets is a powerful tool for CRMs, its core power is add click-to-call function, around this core function, it can extend CRM’s communication workflow. And it can be easily integrated into CRM sites, even without official support, developer can still do the integration through building chrome extension.</p>\n<h2 id=\"Advanced-features-of-these-extensions-could-provide\"><a href=\"#Advanced-features-of-these-extensions-could-provide\" class=\"headerlink\" title=\"Advanced features of these extensions could provide\"></a>Advanced features of these extensions could provide</h2><p><a href=\"https://github.com/embbnux\" target=\"_blank\" rel=\"noopener\">Embbnux Ji</a> has a tuturial: <a href=\"https://medium.com/ringcentral-developers/build-a-chrome-extension-with-ringcentral-embeddable-bb6faee808a3\" target=\"_blank\" rel=\"noopener\">Building Chrome Extension Integrations with RingCentral Embeddable</a>, with this tutorial, we could create Chrome extension for any site with RingCentral Embeddable.</p>\n<p>For CRM sites, we may want to add more advanced features, like click-to-call buttons/links and all the third party features of our ringcentral-embeddable supported:</p>\n<ul>\n<li>For CRM contact list, extension could add hover-to-show tooltip to show click-to-call button.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-2.png\" alt=\" \"></p>\n<ul>\n<li>For CRM contact info page, extension could add click-to-call button in proper positions.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-3.png\" alt=\" \"></p>\n<ul>\n<li>For CRM contact phone number text, extension could convert them to click-to-call link.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/fac-1.png\" alt=\" \"></p>\n<ul>\n<li>Sync CRM contacts to our widgets after user authorization.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/insightly-embeddable-ringcentral-phone/raw/master/screenshots/insightly-4.png\" alt=\" \"></p>\n<ul>\n<li>Sync call log to CRM automatically or manually.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hs6.png\" alt=\" \"></p>\n<ul>\n<li>Check CRM contact activities from our widgets.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hs7.png\" alt=\" \"></p>\n<ul>\n<li>Show CRM contact info panel when inbound/outbound call with CRM contact.</li>\n</ul>\n<p><img src=\"https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone/raw/master/screenshots/hubspot1.png\" alt=\" \"></p>\n<h2 id=\"Create-extension-with-CLI-tool\"><a href=\"#Create-extension-with-CLI-tool\" class=\"headerlink\" title=\"Create extension with CLI tool\"></a>Create extension with CLI tool</h2><p>To minimize the effort to create these extensions, I created the CLI tool: <a href=\"https://github.com/ringcentral/ringcentral-embeddable-extension-factory\" target=\"_blank\" rel=\"noopener\">ringcentral-embeddable-extension-factory</a></p>\n<p>Use CLI tool to init a extension project will be like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># make sure you have npm@5.2+ installed</span></span><br><span class=\"line\">npx ringcentral-embeddable-extension-factory my-app</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/zxdong262/ringcentral-embeddable-extension-factory/raw/master/screenshots/cli.png\" alt=\" \"></p>\n<p>Then just follow the instruction inmy-app/README.md to build, test and develop the extension.</p>\n<p>I have a demo video to show this process.</p>\n<p><a href=\"https://youtu.be/2njQSk8x2K4\" target=\"_blank\" rel=\"noopener\">https://youtu.be/2njQSk8x2K4</a></p>\n<p>As you can see, before setting proper config/functions, it will work as a <strong>Embeddable widgets</strong> only, if you are satisfied with this, it is already done! If you want the extension to do the listed features above, you need more work to get there. The tutorial and examples would be a good place to start.</p>\n<h2 id=\"The-Tutorial\"><a href=\"#The-Tutorial\" class=\"headerlink\" title=\"The Tutorial\"></a>The Tutorial</h2><p>This detailed tutorial will walk you through the process of creating Chrome RingCentral widgets extension for CRM.</p>\n<p><a href=\"https://ringcentral-tutorials.github.io/build-chrome-ringcentral-widgets-extension-for-crm/\" target=\"_blank\" rel=\"noopener\">https://ringcentral-tutorials.github.io/build-chrome-ringcentral-widgets-extension-for-crm/</a></p>\n<h2 id=\"Realworld-examples\"><a href=\"#Realworld-examples\" class=\"headerlink\" title=\"Realworld examples\"></a>Realworld examples</h2><p>You may get some ideas from these codes.</p>\n<ul>\n<li><a href=\"https://github.com/zxdong262/hubspot-embeddable-ringcentral-phone\" target=\"_blank\" rel=\"noopener\">hubspot-embeddable-ringcentral-phone (spa)</a></li>\n<li><a href=\"https://github.com/zxdong262/insightly-embeddable-ringcentral-phone\" target=\"_blank\" rel=\"noopener\">insightly-embeddable-ringcentral-phone (spa)</a></li>\n<li><a href=\"https://github.com/zxdong262/redtail-embeddable-ringcentral-phone\" target=\"_blank\" rel=\"noopener\">redtail-embeddable-ringcentral-phone (non spa)</a></li>\n</ul>\n"},{"layout":"post","title":"How to do quick-review of tickets and bugs before release?","date":"2018-12-06T14:49:39.000Z","_content":"As we all know, before GA, there are tickets or bugs that we need to decide if they should be fixed, have their priority lowered, or be converted to Improvement.\n This essay is for improving our efficiency toward review ticket.\n\nBefore we discuss this topic, I want to share my understanding toward the definition of bug, p3 bug and improvement.\n\nIn my opinion, bugs are what prevent user from finishing his journey in our app.\nBug means current flow or operation will cause customer to have difficulties at work, which means our product not only lowers customer's efficiency, but also makes customer's trouble.\n\nFrom this side, we can define below scenarios as bugs, because it lowers customer's efficiency.\n**Bug examples:**\n  * user can not dial out a phone number\n  * the task that user is editing is overwrote by us\n  * At call history or active call list, our product displays wrong phone numbers or wrong call direction/duration.\n\n\nFollowing this definition, we can have a better understanding toward P3 bug and improvement.\nAs we know, p3 bug means it is a bug but not so important.\n\nBUT what does 'not so important' mean?\nIt means it will cause difficulties for users but frequency of mistakes is low.\nTo be more specific, if this bug is not main feature flow, there is another workround to resolve user's issue, or the frequency of reproducing this issue is very low, we can define it as a p3 bug.\n\nImprovement means it will not cause difficulties for users but if we have this improvement, we can save user's time and improve user's efficiency.\nSo if UI is probably not so beautiful, the feature is not so fancy, but it doesn't effect user's usage of this feature, it should belong to an improvement not a bug.\n\nAccording to above definitions, we can have a rough estimation towards those tickets.\nWe assume total points is 10, we take apart 10 points as 6 points and 4 points.\n6 points aim to feature, 4 points aim to UI. ( Because we think functionality is more important than UI display.)\n\n**From functional point,** We will evaluate a ticket as \n* 5-6 points if this function/feature is very important to user\n* 3-4 points if this function/feature is nice to have\n* 1-2 points if this function/feature bring little effect\n\n**From UI display,** We will evaluate a ticket as \n* 3-4 points if this UI display effects user's usage\n* 1-2 points if this UI display doesn't effect user's usage\n\nNow we add functional point and UI display point, we can get a total point.\n* If the points >= 6, it means the ticket needs to fix at current release\n* If the points is in 4-5,  it means the ticket doesn't need to fix at current release(It can be put to feature release)\n* If the points is in 1-3,  it means the ticket doesn't need to fix at current release, and engineer can resolve this ticket as won’t fix directly\n\n\nAnd there are other situations we need to consider: \nIf some scenarios we don't include at AC discussion, what should we do?\nI think converting those tickets we didn't consider to improvements is what we need to do.\n\nIn a word, if engineer, QA, PM can reach this agreement, maybe we can handle those tickets more efficently.","source":"_posts/2018-12-06-How-to-do-quick-revie-towards-tickets-and-bugs-before-release.markdown","raw":"---\nlayout: post\ntitle:  \"How to do quick-review of tickets and bugs before release?\"\ndate:   2018-12-06 22:49:39 +0800\n\n---\nAs we all know, before GA, there are tickets or bugs that we need to decide if they should be fixed, have their priority lowered, or be converted to Improvement.\n This essay is for improving our efficiency toward review ticket.\n\nBefore we discuss this topic, I want to share my understanding toward the definition of bug, p3 bug and improvement.\n\nIn my opinion, bugs are what prevent user from finishing his journey in our app.\nBug means current flow or operation will cause customer to have difficulties at work, which means our product not only lowers customer's efficiency, but also makes customer's trouble.\n\nFrom this side, we can define below scenarios as bugs, because it lowers customer's efficiency.\n**Bug examples:**\n  * user can not dial out a phone number\n  * the task that user is editing is overwrote by us\n  * At call history or active call list, our product displays wrong phone numbers or wrong call direction/duration.\n\n\nFollowing this definition, we can have a better understanding toward P3 bug and improvement.\nAs we know, p3 bug means it is a bug but not so important.\n\nBUT what does 'not so important' mean?\nIt means it will cause difficulties for users but frequency of mistakes is low.\nTo be more specific, if this bug is not main feature flow, there is another workround to resolve user's issue, or the frequency of reproducing this issue is very low, we can define it as a p3 bug.\n\nImprovement means it will not cause difficulties for users but if we have this improvement, we can save user's time and improve user's efficiency.\nSo if UI is probably not so beautiful, the feature is not so fancy, but it doesn't effect user's usage of this feature, it should belong to an improvement not a bug.\n\nAccording to above definitions, we can have a rough estimation towards those tickets.\nWe assume total points is 10, we take apart 10 points as 6 points and 4 points.\n6 points aim to feature, 4 points aim to UI. ( Because we think functionality is more important than UI display.)\n\n**From functional point,** We will evaluate a ticket as \n* 5-6 points if this function/feature is very important to user\n* 3-4 points if this function/feature is nice to have\n* 1-2 points if this function/feature bring little effect\n\n**From UI display,** We will evaluate a ticket as \n* 3-4 points if this UI display effects user's usage\n* 1-2 points if this UI display doesn't effect user's usage\n\nNow we add functional point and UI display point, we can get a total point.\n* If the points >= 6, it means the ticket needs to fix at current release\n* If the points is in 4-5,  it means the ticket doesn't need to fix at current release(It can be put to feature release)\n* If the points is in 1-3,  it means the ticket doesn't need to fix at current release, and engineer can resolve this ticket as won’t fix directly\n\n\nAnd there are other situations we need to consider: \nIf some scenarios we don't include at AC discussion, what should we do?\nI think converting those tickets we didn't consider to improvements is what we need to do.\n\nIn a word, if engineer, QA, PM can reach this agreement, maybe we can handle those tickets more efficently.","slug":"2018-12-06-How-to-do-quick-revie-towards-tickets-and-bugs-before-release","published":1,"updated":"2018-12-26T03:28:06.254Z","comments":1,"photos":[],"link":"","_id":"cjq4mdvel0003tci5ttbtbs94","content":"<p>As we all know, before GA, there are tickets or bugs that we need to decide if they should be fixed, have their priority lowered, or be converted to Improvement.<br> This essay is for improving our efficiency toward review ticket.</p>\n<p>Before we discuss this topic, I want to share my understanding toward the definition of bug, p3 bug and improvement.</p>\n<p>In my opinion, bugs are what prevent user from finishing his journey in our app.<br>Bug means current flow or operation will cause customer to have difficulties at work, which means our product not only lowers customer’s efficiency, but also makes customer’s trouble.</p>\n<p>From this side, we can define below scenarios as bugs, because it lowers customer’s efficiency.<br><strong>Bug examples:</strong></p>\n<ul>\n<li>user can not dial out a phone number</li>\n<li>the task that user is editing is overwrote by us</li>\n<li>At call history or active call list, our product displays wrong phone numbers or wrong call direction/duration.</li>\n</ul>\n<p>Following this definition, we can have a better understanding toward P3 bug and improvement.<br>As we know, p3 bug means it is a bug but not so important.</p>\n<p>BUT what does ‘not so important’ mean?<br>It means it will cause difficulties for users but frequency of mistakes is low.<br>To be more specific, if this bug is not main feature flow, there is another workround to resolve user’s issue, or the frequency of reproducing this issue is very low, we can define it as a p3 bug.</p>\n<p>Improvement means it will not cause difficulties for users but if we have this improvement, we can save user’s time and improve user’s efficiency.<br>So if UI is probably not so beautiful, the feature is not so fancy, but it doesn’t effect user’s usage of this feature, it should belong to an improvement not a bug.</p>\n<p>According to above definitions, we can have a rough estimation towards those tickets.<br>We assume total points is 10, we take apart 10 points as 6 points and 4 points.<br>6 points aim to feature, 4 points aim to UI. ( Because we think functionality is more important than UI display.)</p>\n<p><strong>From functional point,</strong> We will evaluate a ticket as </p>\n<ul>\n<li>5-6 points if this function/feature is very important to user</li>\n<li>3-4 points if this function/feature is nice to have</li>\n<li>1-2 points if this function/feature bring little effect</li>\n</ul>\n<p><strong>From UI display,</strong> We will evaluate a ticket as </p>\n<ul>\n<li>3-4 points if this UI display effects user’s usage</li>\n<li>1-2 points if this UI display doesn’t effect user’s usage</li>\n</ul>\n<p>Now we add functional point and UI display point, we can get a total point.</p>\n<ul>\n<li>If the points &gt;= 6, it means the ticket needs to fix at current release</li>\n<li>If the points is in 4-5,  it means the ticket doesn’t need to fix at current release(It can be put to feature release)</li>\n<li>If the points is in 1-3,  it means the ticket doesn’t need to fix at current release, and engineer can resolve this ticket as won’t fix directly</li>\n</ul>\n<p>And there are other situations we need to consider:<br>If some scenarios we don’t include at AC discussion, what should we do?<br>I think converting those tickets we didn’t consider to improvements is what we need to do.</p>\n<p>In a word, if engineer, QA, PM can reach this agreement, maybe we can handle those tickets more efficently.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>As we all know, before GA, there are tickets or bugs that we need to decide if they should be fixed, have their priority lowered, or be converted to Improvement.<br> This essay is for improving our efficiency toward review ticket.</p>\n<p>Before we discuss this topic, I want to share my understanding toward the definition of bug, p3 bug and improvement.</p>\n<p>In my opinion, bugs are what prevent user from finishing his journey in our app.<br>Bug means current flow or operation will cause customer to have difficulties at work, which means our product not only lowers customer’s efficiency, but also makes customer’s trouble.</p>\n<p>From this side, we can define below scenarios as bugs, because it lowers customer’s efficiency.<br><strong>Bug examples:</strong></p>\n<ul>\n<li>user can not dial out a phone number</li>\n<li>the task that user is editing is overwrote by us</li>\n<li>At call history or active call list, our product displays wrong phone numbers or wrong call direction/duration.</li>\n</ul>\n<p>Following this definition, we can have a better understanding toward P3 bug and improvement.<br>As we know, p3 bug means it is a bug but not so important.</p>\n<p>BUT what does ‘not so important’ mean?<br>It means it will cause difficulties for users but frequency of mistakes is low.<br>To be more specific, if this bug is not main feature flow, there is another workround to resolve user’s issue, or the frequency of reproducing this issue is very low, we can define it as a p3 bug.</p>\n<p>Improvement means it will not cause difficulties for users but if we have this improvement, we can save user’s time and improve user’s efficiency.<br>So if UI is probably not so beautiful, the feature is not so fancy, but it doesn’t effect user’s usage of this feature, it should belong to an improvement not a bug.</p>\n<p>According to above definitions, we can have a rough estimation towards those tickets.<br>We assume total points is 10, we take apart 10 points as 6 points and 4 points.<br>6 points aim to feature, 4 points aim to UI. ( Because we think functionality is more important than UI display.)</p>\n<p><strong>From functional point,</strong> We will evaluate a ticket as </p>\n<ul>\n<li>5-6 points if this function/feature is very important to user</li>\n<li>3-4 points if this function/feature is nice to have</li>\n<li>1-2 points if this function/feature bring little effect</li>\n</ul>\n<p><strong>From UI display,</strong> We will evaluate a ticket as </p>\n<ul>\n<li>3-4 points if this UI display effects user’s usage</li>\n<li>1-2 points if this UI display doesn’t effect user’s usage</li>\n</ul>\n<p>Now we add functional point and UI display point, we can get a total point.</p>\n<ul>\n<li>If the points &gt;= 6, it means the ticket needs to fix at current release</li>\n<li>If the points is in 4-5,  it means the ticket doesn’t need to fix at current release(It can be put to feature release)</li>\n<li>If the points is in 1-3,  it means the ticket doesn’t need to fix at current release, and engineer can resolve this ticket as won’t fix directly</li>\n</ul>\n<p>And there are other situations we need to consider:<br>If some scenarios we don’t include at AC discussion, what should we do?<br>I think converting those tickets we didn’t consider to improvements is what we need to do.</p>\n<p>In a word, if engineer, QA, PM can reach this agreement, maybe we can handle those tickets more efficently.</p>\n"},{"layout":"post","title":"Reading Code Review Best Practices","date":"2018-12-10T05:31:07.000Z","author":"Joy Zhang","_content":"\n[Article Link](https://medium.com/palantir/code-review-best-practices-19e02780015f)\n\n#### Summary:\n\nPreparing code for review(for reviewees)\n- Scope and size. Shorter changes are preferred over longer ones.\n- Only submit complete, self-reviewed (by diff), and self-tested CRs(code reviews)\n- Refactoring changes should not alter behavior. Separate refactoring and feature development.\n- **Expensive human review time should be spent on the program logic rather than style, syntax, or formatting debates.** As this part, we can use tools to deal with it. But if we find that there exists style, syntax, or formatting problem, we need to point it out.\n\nPerforming code reviews(for reviewers)\n- Review Implementation\n  - Think about how you would have solved the problem\n  - Are there any potential for useful abstractions\n  - Try to “catch” authors taking shortcuts or missing cases by coming up with problematic configurations/input data that breaks their code.\n  - Think about libraries or existing product code\n  - Does the change follow standard patterns\n  - Does the change add compile-time or run-time dependencies (especially between sub-projects)\n- Review Legibility and Style\n  - Think about your reading experience\n  - Does the code adhere to coding guidelines and code style\n  - Does this code have TODOs\n- Review Maintainability\n  - Leave feedback on code-level documentation, comments, and commit messages\n  - Was the external documentation updated\n\n#### Reflection:\n\nSame with coding dojo, code review is a good way to share knowledge and improve code quality as well. Although our project benifits a lot from code review, sometimes code review adds pressure to reviewers and reviewees, what should we do when we want to create a new PR or how to perform code reviews always confuse me.\n\n**Preparing code for review** is a good way to make the code easier to review which could save reviewers’ time and reduce the reviewing pressure.\n\nFurthermore, this article gives a list of things a reviewer should pay attention to in a code review, this is very useful and practicable for teams to perform. However, I only list out the ones that are suitable for us.\n","source":"_posts/2018-12-10-Reading_Code_Review_Best_Practices.md","raw":"---\nlayout: post\ntitle:  \"Reading Code Review Best Practices\"\ndate:   2018-12-10 13:31:07 +0800\ncategories: blog\nauthor: Joy Zhang\n---\n\n[Article Link](https://medium.com/palantir/code-review-best-practices-19e02780015f)\n\n#### Summary:\n\nPreparing code for review(for reviewees)\n- Scope and size. Shorter changes are preferred over longer ones.\n- Only submit complete, self-reviewed (by diff), and self-tested CRs(code reviews)\n- Refactoring changes should not alter behavior. Separate refactoring and feature development.\n- **Expensive human review time should be spent on the program logic rather than style, syntax, or formatting debates.** As this part, we can use tools to deal with it. But if we find that there exists style, syntax, or formatting problem, we need to point it out.\n\nPerforming code reviews(for reviewers)\n- Review Implementation\n  - Think about how you would have solved the problem\n  - Are there any potential for useful abstractions\n  - Try to “catch” authors taking shortcuts or missing cases by coming up with problematic configurations/input data that breaks their code.\n  - Think about libraries or existing product code\n  - Does the change follow standard patterns\n  - Does the change add compile-time or run-time dependencies (especially between sub-projects)\n- Review Legibility and Style\n  - Think about your reading experience\n  - Does the code adhere to coding guidelines and code style\n  - Does this code have TODOs\n- Review Maintainability\n  - Leave feedback on code-level documentation, comments, and commit messages\n  - Was the external documentation updated\n\n#### Reflection:\n\nSame with coding dojo, code review is a good way to share knowledge and improve code quality as well. Although our project benifits a lot from code review, sometimes code review adds pressure to reviewers and reviewees, what should we do when we want to create a new PR or how to perform code reviews always confuse me.\n\n**Preparing code for review** is a good way to make the code easier to review which could save reviewers’ time and reduce the reviewing pressure.\n\nFurthermore, this article gives a list of things a reviewer should pay attention to in a code review, this is very useful and practicable for teams to perform. However, I only list out the ones that are suitable for us.\n","slug":"2018-12-10-Reading_Code_Review_Best_Practices","published":1,"updated":"2018-12-26T03:28:06.254Z","comments":1,"photos":[],"link":"","_id":"cjq4mdvem0004tci5ony3jo1a","content":"<p><a href=\"https://medium.com/palantir/code-review-best-practices-19e02780015f\" target=\"_blank\" rel=\"noopener\">Article Link</a></p>\n<h4 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary:\"></a>Summary:</h4><p>Preparing code for review(for reviewees)</p>\n<ul>\n<li>Scope and size. Shorter changes are preferred over longer ones.</li>\n<li>Only submit complete, self-reviewed (by diff), and self-tested CRs(code reviews)</li>\n<li>Refactoring changes should not alter behavior. Separate refactoring and feature development.</li>\n<li><strong>Expensive human review time should be spent on the program logic rather than style, syntax, or formatting debates.</strong> As this part, we can use tools to deal with it. But if we find that there exists style, syntax, or formatting problem, we need to point it out.</li>\n</ul>\n<p>Performing code reviews(for reviewers)</p>\n<ul>\n<li>Review Implementation<ul>\n<li>Think about how you would have solved the problem</li>\n<li>Are there any potential for useful abstractions</li>\n<li>Try to “catch” authors taking shortcuts or missing cases by coming up with problematic configurations/input data that breaks their code.</li>\n<li>Think about libraries or existing product code</li>\n<li>Does the change follow standard patterns</li>\n<li>Does the change add compile-time or run-time dependencies (especially between sub-projects)</li>\n</ul>\n</li>\n<li>Review Legibility and Style<ul>\n<li>Think about your reading experience</li>\n<li>Does the code adhere to coding guidelines and code style</li>\n<li>Does this code have TODOs</li>\n</ul>\n</li>\n<li>Review Maintainability<ul>\n<li>Leave feedback on code-level documentation, comments, and commit messages</li>\n<li>Was the external documentation updated</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection:\"></a>Reflection:</h4><p>Same with coding dojo, code review is a good way to share knowledge and improve code quality as well. Although our project benifits a lot from code review, sometimes code review adds pressure to reviewers and reviewees, what should we do when we want to create a new PR or how to perform code reviews always confuse me.</p>\n<p><strong>Preparing code for review</strong> is a good way to make the code easier to review which could save reviewers’ time and reduce the reviewing pressure.</p>\n<p>Furthermore, this article gives a list of things a reviewer should pay attention to in a code review, this is very useful and practicable for teams to perform. However, I only list out the ones that are suitable for us.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://medium.com/palantir/code-review-best-practices-19e02780015f\" target=\"_blank\" rel=\"noopener\">Article Link</a></p>\n<h4 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary:\"></a>Summary:</h4><p>Preparing code for review(for reviewees)</p>\n<ul>\n<li>Scope and size. Shorter changes are preferred over longer ones.</li>\n<li>Only submit complete, self-reviewed (by diff), and self-tested CRs(code reviews)</li>\n<li>Refactoring changes should not alter behavior. Separate refactoring and feature development.</li>\n<li><strong>Expensive human review time should be spent on the program logic rather than style, syntax, or formatting debates.</strong> As this part, we can use tools to deal with it. But if we find that there exists style, syntax, or formatting problem, we need to point it out.</li>\n</ul>\n<p>Performing code reviews(for reviewers)</p>\n<ul>\n<li>Review Implementation<ul>\n<li>Think about how you would have solved the problem</li>\n<li>Are there any potential for useful abstractions</li>\n<li>Try to “catch” authors taking shortcuts or missing cases by coming up with problematic configurations/input data that breaks their code.</li>\n<li>Think about libraries or existing product code</li>\n<li>Does the change follow standard patterns</li>\n<li>Does the change add compile-time or run-time dependencies (especially between sub-projects)</li>\n</ul>\n</li>\n<li>Review Legibility and Style<ul>\n<li>Think about your reading experience</li>\n<li>Does the code adhere to coding guidelines and code style</li>\n<li>Does this code have TODOs</li>\n</ul>\n</li>\n<li>Review Maintainability<ul>\n<li>Leave feedback on code-level documentation, comments, and commit messages</li>\n<li>Was the external documentation updated</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection:\"></a>Reflection:</h4><p>Same with coding dojo, code review is a good way to share knowledge and improve code quality as well. Although our project benifits a lot from code review, sometimes code review adds pressure to reviewers and reviewees, what should we do when we want to create a new PR or how to perform code reviews always confuse me.</p>\n<p><strong>Preparing code for review</strong> is a good way to make the code easier to review which could save reviewers’ time and reduce the reviewing pressure.</p>\n<p>Furthermore, this article gives a list of things a reviewer should pay attention to in a code review, this is very useful and practicable for teams to perform. However, I only list out the ones that are suitable for us.</p>\n"},{"layout":"post","title":"Let's create some glip bots with python","date":"2018-12-10T05:31:07.000Z","author":"Drake Zhao","_content":"\n![ ](https://github.com/zxdong262/ringcentral-chatbot-factory-py/blob/master/screenshots/wanted.jpg?raw=true)\n\nThis is a intro blog about my recent work: [ringcentral-chatbot-python](https://github.com/zxdong262/ringcentral-chatbot-python).\n\nThe project is part of our chatbot plan: make writing a glip chatbot easy and fun. It is not mature enough for public yet, still need to add more documents and features.\n\nIt does work and is really easy to work with, you do not even need to know any python to get it running and talking. So RingCentral developers, let's create some chatbot with python, and give some feedback.\n\n## Prerequisites\n\n- Python3.6+ and Pip3\n- Create the bot App: Login to [developer.ringcentral.com](https://developer.ringcentral.com) and create an `public` `Server/Bot` app with permissions: `ReadContacts, ReadMessages, ReadPresence, Contacts, ReadAccounts, SMS, InternalMessages, ReadCallLog, ReadCallRecording, WebhookSubscriptions, Glip`\n\n## Getting started\n\n```bash\npip3 install ringcentral_chatbot_factory\n\nrcf my-ringcentral-chat-bot\n# then carefully answer all questions, then the my-app folder will be created\n\n# follow the instruction of my-app/README.md to dev/run/test the bot\ncd my-ringcentral-chat-bot\n\n# use virtualenv\npip3 install virtualenv # might need sudo\n\n# init virtual env\nvirtualenv venv --python=python3\n\n# use env\nsource ./venv/bin/activate\n\n# install required modules\npip install -r requirements.txt\n\n# run ngrok proxy\n# since bot need https server,\n# so we need a https proxy for RingCentral to visit our local server\n./bin/proxy\n# will show:\n# Forwarding https://xxxxx.ngrok.io -> localhost:9890\n\n# create env file\n# .env already created from .sample.env\n# just edit .env, set proper setting,\nRINGCENTRAL_BOT_SERVER=https://xxxxx.ngrok.io\n\n## for bots auth required, get them from your RingCentral app page\nRINGCENTRAL_BOT_CLIENT_ID=\nRINGCENTRAL_BOT_CLIENT_SECRET=\n\n# and goto your RingCentral app setting page, set OAuth Redirect URI to https://https://xxxxx.ngrok.io/bot-oauth\n\n# run local dev server\n./bin/start\n```\n\n## Test bot\n\n- Goto your RingCentral app's bot section, click 'Add to glip'\n- Login to [https://glip-app.devtest.ringcentral.com](https://glip-app.devtest.ringcentral.com), find the bot by searching its name. Talk to the bot.\n- Edit config.py to change bot bahavior and test in [https://glip-app.devtest.ringcentral.com](https://glip-app.devtest.ringcentral.com)\n\n## Let's write some bot logic\n\nlet's write a bot that can tell server time/date as a hello world bot.\n\nFirst, create bot config file by `cp config.sample.py config.py`\n\nThen Edit `config.py`, like this:\n\n```py\n\"\"\"\nsample config module\nrun \"cp config.sample.py config.py\" to create local config\nedit config.py functions to override default bot behavior\n\"\"\"\n\nfrom datetime import datetime\n\n__name__ = 'localConfig'\n__package__ = 'ringcentral_bot_framework'\n\ndef helpMsg(botId):\n  return f'''Hello, I am a date/time chatbot. Please reply \"@![:Person]({botId}) **cmd**\" if you want to talk to me.\n\n**cmd** list\n\n**date** -- show current date\n**time** -- show current time\n  '''\n\ndef botJoinPrivateChatAction(bot, groupId, user, dbAction):\n  \"\"\"\n  bot join private chat event handler\n  bot could send some welcome message or help, or something else\n  \"\"\"\n  text = helpMsg(bot.id)\n  bot.sendMessage(\n    groupId,\n    {\n      'text': text\n    }\n  )\n\ndef botGotPostAddAction(\n  bot,\n  groupId,\n  creatorId,\n  user,\n  text,\n  dbAction,\n  handledByExtension\n):\n  \"\"\"\n  bot got group chat message: text\n  bot could send some response\n  \"\"\"\n  if handledByExtension:\n    return\n\n  if text == f'![:Person]({bot.id}) date':\n    date = str(datetime.now().strftime('%Y-%m-%d'))\n    bot.sendMessage(\n      groupId,\n      {\n        'text': f'![:Person]({creatorId}), current date is {date}'\n      }\n    )\n  elif text == f'![:Person]({bot.id}) time':\n    time = str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))\n    bot.sendMessage(\n      groupId,\n      {\n        'text': f'![:Person]({creatorId}), current time is {time}'\n      }\n    )\n  elif f'![:Person]({bot.id})' in text:\n    bot.sendMessage(\n      groupId,\n      {\n        'text': helpMsg(bot.id)\n      }\n    )\n\n\n```\n\nThen try talk to the bot in [https://glip-app.devtest.ringcentral.com](https://glip-app.devtest.ringcentral.com), see how it work.\n\nThat is it. You can just focus on the bot logic.\n\nIf you want to access user data, subscribe to user event, or use different database, just check these examples.\n\n## Example bots\n\n- [date-time-chatbot](https://github.com/zxdong262/ringcentral-date-time-chatbot): simple RingCentral chatbot that can tell server time/date.\n- [assistant-bot](https://github.com/zxdong262/ringcentral-assistant-bot): simple assistant Glip bot to show user/company information, this bot will show you how to access user data.\n- [survey-bot](https://github.com/zxdong262/ringcentral-survey-bot): example survey bot, this bot will show you how to create/use custom database wrapper.\n\n## Deploy to AWS Lambda\n\nIf you are satisfied with the bot, time to deploy to production server, I would suggest AWS Lambda for these reasons:\n\n1. Free tier gives 1000000 free run per month\n2. Https ready, do not need extra efforts to handle domain/https\n3. Very stable and reliable\n\n*Be aware that AWS Lambda **ONLY works in linux** on an x64 architecture. For **non-linux os**, we need **docker** to build dependencies, should [install docker](https://docs.docker.com/docker-for-mac/) first.\n\nThis requires Nodejs 8.10+/npm, recommend using [nvm](https://github.com/creationix/nvm) to install nodejs/npm.\n\nGet an AWS account, create `aws_access_key_id` and `aws_secret_access_key` and place them in `~/.aws/credentials`, like this:\n\n```bash\n[default]\naws_access_key_id = <your aws_access_key_id>\naws_secret_access_key = <your aws_secret_access_key>\n```\n\nFor more information, refer to [https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html](https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html)\n\n```bash\ncp dev/lambda/serverless.sample.yml dev/lambda/serverless.yml\n```\n\nEdit `dev/lambda/serverless.yml`, and make sure you set the proper name and required env.\n\n```yml\n# you can define service wide environment variables here\n  environment:\n    ENV: production\n    # ringcentral apps\n\n    ## for bots auth, required\n    RINGCENTRAL_BOT_CLIENT_ID:\n    RINGCENTRAL_BOT_CLIENT_SECRET:\n\n    ## for user auth, could be empty if do not need user auth\n    RINGCENTRAL_USER_CLIENT_ID:\n    RINGCENTRAL_USER_CLIENT_SECRET:\n\n    ## common\n    RINGCENTRAL_SERVER: https://platform.devtest.ringcentral.com\n    RINGCENTRAL_BOT_SERVER: https://xxxxx.execute-api.us-east-1.amazonaws.com/dev\n\n    # db\n    DB_TYPE: dynamodb\n    DYNAMODB_TABLE_PREFIX: ringcentral-bot\n    DYNAMODB_REGION: us-east-1\n    DYNAMODB_ReadCapacityUnits: 1\n    DYNAMODB_WriteCapacityUnits: 1\n\n```\n\nDeploy to AWS Lambda with `bin/deploy`\n\n```bash\n# Run this cmd to deploy to AWS Lambda\nbin/deploy\n```\n\nAfter successful deploy, you will get the https api url:\n\n```bash\nService Information\nservice: ringcentral-bot\nstage: dev\nregion: us-east-1\nstack: ringcentral-bot-dev\napi keys:\n  None\nendpoints:\n  ANY - https://dddddd.execute-api.us-east-1.amazonaws.com/dev/{action+}\n  GET - https://dddddd.execute-api.us-east-1.amazonaws.com/dev/\n```\n\nRelpace `RINGCENTRAL_BOT_SERVER: https://xxxxx.execute-api.us-east-1.amazonaws.com/dev` in serverless.yml with\n`RINGCENTRAL_BOT_SERVER: https://dddddd.execute-api.us-east-1.amazonaws.com/dev`\n and run `bin/deploy` to deploy again.\n\nWatch Lambda server log by run:\n\n```bash\nbin/watch\n```\n\nDo not forget to set your RingCentral app's redirect URL to Lambda's API Gateway URL, `https://dddddd.execute-api.us-east-1.amazonaws.com/dev/bot-oauth` for bot app.\n\n## Use Extensions\n\nRingCentral Chatbot Framework for Python Extensions will extend bot command support with simple settings in `.env`.\n\nJust set like this in `.env`\n\n```bash\nEXTENSIONS=ringcentral_bot_framework_extension_botinfo,ringcentral_bot_framework_extension_some_other_extension\n```\n\nAnd install these exetnsions by `pip install ringcentral_bot_framework_extension_botinfo ringcentral_bot_framework_extension_some_other_extension`, it is done.\n\n![ ](https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info/raw/master/screenshots/ss.png)\n\nYou can search for more extension in [pypi.org](https://pypi.org) with keyword `ringcentral_bot_framework_extension`.\n\n## Write a extension yourself\n\nWriting extension is simple, just check out [botinfo extension](https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info) as an example, you just need to write one function `botGotPostAddAction` there.\n\nMake sure you follow the naming rule: starts with `ringcentral_bot_framework_extension_` and publish to pypi.org and it is done!\n\n```python\n# botinfo extension's source code\n# https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info/blob/master/ringcentral_bot_framework_extension_botinfo/__init__.py\nimport json\n\nname = 'ringcentral_bot_framework_extension_botinfo'\n\ndef botGotPostAddAction(\n  bot,\n  groupId,\n  creatorId,\n  user,\n  text,\n  dbAction\n):\n  \"\"\"\n  bot got group chat message: text\n  bot extension could send some response\n  return True when bot send message, otherwise return False\n  \"\"\"\n  if not f'![:Person]({bot.id})' in text:\n    return False\n\n  if 'bot info' in text:\n    botInfo = bot.platform.get('/account/~/extension/~')\n    txt = json.loads(botInfo.text())\n    txt = json.dumps(txt, indent=2)\n    msg = f'![:Person]({creatorId}) bot info json is:\\n' + txt\n\n    bot.sendMessage(\n      groupId,\n      {\n        'text': msg\n      }\n    )\n    return True\n  else:\n    return False\n```\n\n## Credits\n\n- The core bot framework logic is implanted from [ringcentral-ai-bot](https://github.com/ringcentral-tutorials/ringcentral-ai-bot) written by [@tylerlong](https://github.com/tylerlong)\n\n- Also check tyler's js bot framework [https://github.com/ringcentral/ringcentral-chatbot-js](https://github.com/ringcentral/ringcentral-chatbot-js)\n","source":"_posts/2018-12-10-blog-lets-create-some-glip-bots-with-python.markdown","raw":"---\nlayout: post\ntitle:  \"Let's create some glip bots with python\"\ndate:   2018-12-10 13:31:07 +0800\ncategories: blog\nauthor: Drake Zhao\n---\n\n![ ](https://github.com/zxdong262/ringcentral-chatbot-factory-py/blob/master/screenshots/wanted.jpg?raw=true)\n\nThis is a intro blog about my recent work: [ringcentral-chatbot-python](https://github.com/zxdong262/ringcentral-chatbot-python).\n\nThe project is part of our chatbot plan: make writing a glip chatbot easy and fun. It is not mature enough for public yet, still need to add more documents and features.\n\nIt does work and is really easy to work with, you do not even need to know any python to get it running and talking. So RingCentral developers, let's create some chatbot with python, and give some feedback.\n\n## Prerequisites\n\n- Python3.6+ and Pip3\n- Create the bot App: Login to [developer.ringcentral.com](https://developer.ringcentral.com) and create an `public` `Server/Bot` app with permissions: `ReadContacts, ReadMessages, ReadPresence, Contacts, ReadAccounts, SMS, InternalMessages, ReadCallLog, ReadCallRecording, WebhookSubscriptions, Glip`\n\n## Getting started\n\n```bash\npip3 install ringcentral_chatbot_factory\n\nrcf my-ringcentral-chat-bot\n# then carefully answer all questions, then the my-app folder will be created\n\n# follow the instruction of my-app/README.md to dev/run/test the bot\ncd my-ringcentral-chat-bot\n\n# use virtualenv\npip3 install virtualenv # might need sudo\n\n# init virtual env\nvirtualenv venv --python=python3\n\n# use env\nsource ./venv/bin/activate\n\n# install required modules\npip install -r requirements.txt\n\n# run ngrok proxy\n# since bot need https server,\n# so we need a https proxy for RingCentral to visit our local server\n./bin/proxy\n# will show:\n# Forwarding https://xxxxx.ngrok.io -> localhost:9890\n\n# create env file\n# .env already created from .sample.env\n# just edit .env, set proper setting,\nRINGCENTRAL_BOT_SERVER=https://xxxxx.ngrok.io\n\n## for bots auth required, get them from your RingCentral app page\nRINGCENTRAL_BOT_CLIENT_ID=\nRINGCENTRAL_BOT_CLIENT_SECRET=\n\n# and goto your RingCentral app setting page, set OAuth Redirect URI to https://https://xxxxx.ngrok.io/bot-oauth\n\n# run local dev server\n./bin/start\n```\n\n## Test bot\n\n- Goto your RingCentral app's bot section, click 'Add to glip'\n- Login to [https://glip-app.devtest.ringcentral.com](https://glip-app.devtest.ringcentral.com), find the bot by searching its name. Talk to the bot.\n- Edit config.py to change bot bahavior and test in [https://glip-app.devtest.ringcentral.com](https://glip-app.devtest.ringcentral.com)\n\n## Let's write some bot logic\n\nlet's write a bot that can tell server time/date as a hello world bot.\n\nFirst, create bot config file by `cp config.sample.py config.py`\n\nThen Edit `config.py`, like this:\n\n```py\n\"\"\"\nsample config module\nrun \"cp config.sample.py config.py\" to create local config\nedit config.py functions to override default bot behavior\n\"\"\"\n\nfrom datetime import datetime\n\n__name__ = 'localConfig'\n__package__ = 'ringcentral_bot_framework'\n\ndef helpMsg(botId):\n  return f'''Hello, I am a date/time chatbot. Please reply \"@![:Person]({botId}) **cmd**\" if you want to talk to me.\n\n**cmd** list\n\n**date** -- show current date\n**time** -- show current time\n  '''\n\ndef botJoinPrivateChatAction(bot, groupId, user, dbAction):\n  \"\"\"\n  bot join private chat event handler\n  bot could send some welcome message or help, or something else\n  \"\"\"\n  text = helpMsg(bot.id)\n  bot.sendMessage(\n    groupId,\n    {\n      'text': text\n    }\n  )\n\ndef botGotPostAddAction(\n  bot,\n  groupId,\n  creatorId,\n  user,\n  text,\n  dbAction,\n  handledByExtension\n):\n  \"\"\"\n  bot got group chat message: text\n  bot could send some response\n  \"\"\"\n  if handledByExtension:\n    return\n\n  if text == f'![:Person]({bot.id}) date':\n    date = str(datetime.now().strftime('%Y-%m-%d'))\n    bot.sendMessage(\n      groupId,\n      {\n        'text': f'![:Person]({creatorId}), current date is {date}'\n      }\n    )\n  elif text == f'![:Person]({bot.id}) time':\n    time = str(datetime.now().strftime('%Y-%m-%d %H:%M:%S'))\n    bot.sendMessage(\n      groupId,\n      {\n        'text': f'![:Person]({creatorId}), current time is {time}'\n      }\n    )\n  elif f'![:Person]({bot.id})' in text:\n    bot.sendMessage(\n      groupId,\n      {\n        'text': helpMsg(bot.id)\n      }\n    )\n\n\n```\n\nThen try talk to the bot in [https://glip-app.devtest.ringcentral.com](https://glip-app.devtest.ringcentral.com), see how it work.\n\nThat is it. You can just focus on the bot logic.\n\nIf you want to access user data, subscribe to user event, or use different database, just check these examples.\n\n## Example bots\n\n- [date-time-chatbot](https://github.com/zxdong262/ringcentral-date-time-chatbot): simple RingCentral chatbot that can tell server time/date.\n- [assistant-bot](https://github.com/zxdong262/ringcentral-assistant-bot): simple assistant Glip bot to show user/company information, this bot will show you how to access user data.\n- [survey-bot](https://github.com/zxdong262/ringcentral-survey-bot): example survey bot, this bot will show you how to create/use custom database wrapper.\n\n## Deploy to AWS Lambda\n\nIf you are satisfied with the bot, time to deploy to production server, I would suggest AWS Lambda for these reasons:\n\n1. Free tier gives 1000000 free run per month\n2. Https ready, do not need extra efforts to handle domain/https\n3. Very stable and reliable\n\n*Be aware that AWS Lambda **ONLY works in linux** on an x64 architecture. For **non-linux os**, we need **docker** to build dependencies, should [install docker](https://docs.docker.com/docker-for-mac/) first.\n\nThis requires Nodejs 8.10+/npm, recommend using [nvm](https://github.com/creationix/nvm) to install nodejs/npm.\n\nGet an AWS account, create `aws_access_key_id` and `aws_secret_access_key` and place them in `~/.aws/credentials`, like this:\n\n```bash\n[default]\naws_access_key_id = <your aws_access_key_id>\naws_secret_access_key = <your aws_secret_access_key>\n```\n\nFor more information, refer to [https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html](https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html)\n\n```bash\ncp dev/lambda/serverless.sample.yml dev/lambda/serverless.yml\n```\n\nEdit `dev/lambda/serverless.yml`, and make sure you set the proper name and required env.\n\n```yml\n# you can define service wide environment variables here\n  environment:\n    ENV: production\n    # ringcentral apps\n\n    ## for bots auth, required\n    RINGCENTRAL_BOT_CLIENT_ID:\n    RINGCENTRAL_BOT_CLIENT_SECRET:\n\n    ## for user auth, could be empty if do not need user auth\n    RINGCENTRAL_USER_CLIENT_ID:\n    RINGCENTRAL_USER_CLIENT_SECRET:\n\n    ## common\n    RINGCENTRAL_SERVER: https://platform.devtest.ringcentral.com\n    RINGCENTRAL_BOT_SERVER: https://xxxxx.execute-api.us-east-1.amazonaws.com/dev\n\n    # db\n    DB_TYPE: dynamodb\n    DYNAMODB_TABLE_PREFIX: ringcentral-bot\n    DYNAMODB_REGION: us-east-1\n    DYNAMODB_ReadCapacityUnits: 1\n    DYNAMODB_WriteCapacityUnits: 1\n\n```\n\nDeploy to AWS Lambda with `bin/deploy`\n\n```bash\n# Run this cmd to deploy to AWS Lambda\nbin/deploy\n```\n\nAfter successful deploy, you will get the https api url:\n\n```bash\nService Information\nservice: ringcentral-bot\nstage: dev\nregion: us-east-1\nstack: ringcentral-bot-dev\napi keys:\n  None\nendpoints:\n  ANY - https://dddddd.execute-api.us-east-1.amazonaws.com/dev/{action+}\n  GET - https://dddddd.execute-api.us-east-1.amazonaws.com/dev/\n```\n\nRelpace `RINGCENTRAL_BOT_SERVER: https://xxxxx.execute-api.us-east-1.amazonaws.com/dev` in serverless.yml with\n`RINGCENTRAL_BOT_SERVER: https://dddddd.execute-api.us-east-1.amazonaws.com/dev`\n and run `bin/deploy` to deploy again.\n\nWatch Lambda server log by run:\n\n```bash\nbin/watch\n```\n\nDo not forget to set your RingCentral app's redirect URL to Lambda's API Gateway URL, `https://dddddd.execute-api.us-east-1.amazonaws.com/dev/bot-oauth` for bot app.\n\n## Use Extensions\n\nRingCentral Chatbot Framework for Python Extensions will extend bot command support with simple settings in `.env`.\n\nJust set like this in `.env`\n\n```bash\nEXTENSIONS=ringcentral_bot_framework_extension_botinfo,ringcentral_bot_framework_extension_some_other_extension\n```\n\nAnd install these exetnsions by `pip install ringcentral_bot_framework_extension_botinfo ringcentral_bot_framework_extension_some_other_extension`, it is done.\n\n![ ](https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info/raw/master/screenshots/ss.png)\n\nYou can search for more extension in [pypi.org](https://pypi.org) with keyword `ringcentral_bot_framework_extension`.\n\n## Write a extension yourself\n\nWriting extension is simple, just check out [botinfo extension](https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info) as an example, you just need to write one function `botGotPostAddAction` there.\n\nMake sure you follow the naming rule: starts with `ringcentral_bot_framework_extension_` and publish to pypi.org and it is done!\n\n```python\n# botinfo extension's source code\n# https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info/blob/master/ringcentral_bot_framework_extension_botinfo/__init__.py\nimport json\n\nname = 'ringcentral_bot_framework_extension_botinfo'\n\ndef botGotPostAddAction(\n  bot,\n  groupId,\n  creatorId,\n  user,\n  text,\n  dbAction\n):\n  \"\"\"\n  bot got group chat message: text\n  bot extension could send some response\n  return True when bot send message, otherwise return False\n  \"\"\"\n  if not f'![:Person]({bot.id})' in text:\n    return False\n\n  if 'bot info' in text:\n    botInfo = bot.platform.get('/account/~/extension/~')\n    txt = json.loads(botInfo.text())\n    txt = json.dumps(txt, indent=2)\n    msg = f'![:Person]({creatorId}) bot info json is:\\n' + txt\n\n    bot.sendMessage(\n      groupId,\n      {\n        'text': msg\n      }\n    )\n    return True\n  else:\n    return False\n```\n\n## Credits\n\n- The core bot framework logic is implanted from [ringcentral-ai-bot](https://github.com/ringcentral-tutorials/ringcentral-ai-bot) written by [@tylerlong](https://github.com/tylerlong)\n\n- Also check tyler's js bot framework [https://github.com/ringcentral/ringcentral-chatbot-js](https://github.com/ringcentral/ringcentral-chatbot-js)\n","slug":"2018-12-10-blog-lets-create-some-glip-bots-with-python","published":1,"updated":"2018-12-26T03:28:06.254Z","comments":1,"photos":[],"link":"","_id":"cjq4mdveo0005tci5ezt6dv11","content":"<p><img src=\"https://github.com/zxdong262/ringcentral-chatbot-factory-py/blob/master/screenshots/wanted.jpg?raw=true\" alt=\" \"></p>\n<p>This is a intro blog about my recent work: <a href=\"https://github.com/zxdong262/ringcentral-chatbot-python\" target=\"_blank\" rel=\"noopener\">ringcentral-chatbot-python</a>.</p>\n<p>The project is part of our chatbot plan: make writing a glip chatbot easy and fun. It is not mature enough for public yet, still need to add more documents and features.</p>\n<p>It does work and is really easy to work with, you do not even need to know any python to get it running and talking. So RingCentral developers, let’s create some chatbot with python, and give some feedback.</p>\n<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><ul>\n<li>Python3.6+ and Pip3</li>\n<li>Create the bot App: Login to <a href=\"https://developer.ringcentral.com\" target=\"_blank\" rel=\"noopener\">developer.ringcentral.com</a> and create an <code>public</code> <code>Server/Bot</code> app with permissions: <code>ReadContacts, ReadMessages, ReadPresence, Contacts, ReadAccounts, SMS, InternalMessages, ReadCallLog, ReadCallRecording, WebhookSubscriptions, Glip</code></li>\n</ul>\n<h2 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install ringcentral_chatbot_factory</span><br><span class=\"line\"></span><br><span class=\"line\">rcf my-ringcentral-chat-bot</span><br><span class=\"line\"><span class=\"comment\"># then carefully answer all questions, then the my-app folder will be created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># follow the instruction of my-app/README.md to dev/run/test the bot</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-ringcentral-chat-bot</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use virtualenv</span></span><br><span class=\"line\">pip3 install virtualenv <span class=\"comment\"># might need sudo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># init virtual env</span></span><br><span class=\"line\">virtualenv venv --python=python3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use env</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ./venv/bin/activate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install required modules</span></span><br><span class=\"line\">pip install -r requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># run ngrok proxy</span></span><br><span class=\"line\"><span class=\"comment\"># since bot need https server,</span></span><br><span class=\"line\"><span class=\"comment\"># so we need a https proxy for RingCentral to visit our local server</span></span><br><span class=\"line\">./bin/proxy</span><br><span class=\"line\"><span class=\"comment\"># will show:</span></span><br><span class=\"line\"><span class=\"comment\"># Forwarding https://xxxxx.ngrok.io -&gt; localhost:9890</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create env file</span></span><br><span class=\"line\"><span class=\"comment\"># .env already created from .sample.env</span></span><br><span class=\"line\"><span class=\"comment\"># just edit .env, set proper setting,</span></span><br><span class=\"line\">RINGCENTRAL_BOT_SERVER=https://xxxxx.ngrok.io</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## for bots auth required, get them from your RingCentral app page</span></span><br><span class=\"line\">RINGCENTRAL_BOT_CLIENT_ID=</span><br><span class=\"line\">RINGCENTRAL_BOT_CLIENT_SECRET=</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># and goto your RingCentral app setting page, set OAuth Redirect URI to https://https://xxxxx.ngrok.io/bot-oauth</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># run local dev server</span></span><br><span class=\"line\">./bin/start</span><br></pre></td></tr></table></figure>\n<h2 id=\"Test-bot\"><a href=\"#Test-bot\" class=\"headerlink\" title=\"Test bot\"></a>Test bot</h2><ul>\n<li>Goto your RingCentral app’s bot section, click ‘Add to glip’</li>\n<li>Login to <a href=\"https://glip-app.devtest.ringcentral.com\" target=\"_blank\" rel=\"noopener\">https://glip-app.devtest.ringcentral.com</a>, find the bot by searching its name. Talk to the bot.</li>\n<li>Edit config.py to change bot bahavior and test in <a href=\"https://glip-app.devtest.ringcentral.com\" target=\"_blank\" rel=\"noopener\">https://glip-app.devtest.ringcentral.com</a></li>\n</ul>\n<h2 id=\"Let’s-write-some-bot-logic\"><a href=\"#Let’s-write-some-bot-logic\" class=\"headerlink\" title=\"Let’s write some bot logic\"></a>Let’s write some bot logic</h2><p>let’s write a bot that can tell server time/date as a hello world bot.</p>\n<p>First, create bot config file by <code>cp config.sample.py config.py</code></p>\n<p>Then Edit <code>config.py</code>, like this:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">sample config module</span></span><br><span class=\"line\"><span class=\"string\">run \"cp config.sample.py config.py\" to create local config</span></span><br><span class=\"line\"><span class=\"string\">edit config.py functions to override default bot behavior</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">__name__ = <span class=\"string\">'localConfig'</span></span><br><span class=\"line\">__package__ = <span class=\"string\">'ringcentral_bot_framework'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helpMsg</span><span class=\"params\">(botId)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">f'''Hello, I am a date/time chatbot. Please reply \"@![:Person](<span class=\"subst\">&#123;botId&#125;</span>) **cmd**\" if you want to talk to me.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">**cmd** list</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">**date** -- show current date</span></span><br><span class=\"line\"><span class=\"string\">**time** -- show current time</span></span><br><span class=\"line\"><span class=\"string\">  '''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">botJoinPrivateChatAction</span><span class=\"params\">(bot, groupId, user, dbAction)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  bot join private chat event handler</span></span><br><span class=\"line\"><span class=\"string\">  bot could send some welcome message or help, or something else</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  text = helpMsg(bot.id)</span><br><span class=\"line\">  bot.sendMessage(</span><br><span class=\"line\">    groupId,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">'text'</span>: text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">botGotPostAddAction</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  bot,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  groupId,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  creatorId,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  user,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  text,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  dbAction,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  handledByExtension</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  bot got group chat message: text</span></span><br><span class=\"line\"><span class=\"string\">  bot could send some response</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> handledByExtension:</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> text == <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;bot.id&#125;</span>) date'</span>:</span><br><span class=\"line\">    date = str(datetime.now().strftime(<span class=\"string\">'%Y-%m-%d'</span>))</span><br><span class=\"line\">    bot.sendMessage(</span><br><span class=\"line\">      groupId,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">'text'</span>: <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;creatorId&#125;</span>), current date is <span class=\"subst\">&#123;date&#125;</span>'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  <span class=\"keyword\">elif</span> text == <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;bot.id&#125;</span>) time'</span>:</span><br><span class=\"line\">    time = str(datetime.now().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class=\"line\">    bot.sendMessage(</span><br><span class=\"line\">      groupId,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">'text'</span>: <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;creatorId&#125;</span>), current time is <span class=\"subst\">&#123;time&#125;</span>'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  <span class=\"keyword\">elif</span> <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;bot.id&#125;</span>)'</span> <span class=\"keyword\">in</span> text:</span><br><span class=\"line\">    bot.sendMessage(</span><br><span class=\"line\">      groupId,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">'text'</span>: helpMsg(bot.id)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<p>Then try talk to the bot in <a href=\"https://glip-app.devtest.ringcentral.com\" target=\"_blank\" rel=\"noopener\">https://glip-app.devtest.ringcentral.com</a>, see how it work.</p>\n<p>That is it. You can just focus on the bot logic.</p>\n<p>If you want to access user data, subscribe to user event, or use different database, just check these examples.</p>\n<h2 id=\"Example-bots\"><a href=\"#Example-bots\" class=\"headerlink\" title=\"Example bots\"></a>Example bots</h2><ul>\n<li><a href=\"https://github.com/zxdong262/ringcentral-date-time-chatbot\" target=\"_blank\" rel=\"noopener\">date-time-chatbot</a>: simple RingCentral chatbot that can tell server time/date.</li>\n<li><a href=\"https://github.com/zxdong262/ringcentral-assistant-bot\" target=\"_blank\" rel=\"noopener\">assistant-bot</a>: simple assistant Glip bot to show user/company information, this bot will show you how to access user data.</li>\n<li><a href=\"https://github.com/zxdong262/ringcentral-survey-bot\" target=\"_blank\" rel=\"noopener\">survey-bot</a>: example survey bot, this bot will show you how to create/use custom database wrapper.</li>\n</ul>\n<h2 id=\"Deploy-to-AWS-Lambda\"><a href=\"#Deploy-to-AWS-Lambda\" class=\"headerlink\" title=\"Deploy to AWS Lambda\"></a>Deploy to AWS Lambda</h2><p>If you are satisfied with the bot, time to deploy to production server, I would suggest AWS Lambda for these reasons:</p>\n<ol>\n<li>Free tier gives 1000000 free run per month</li>\n<li>Https ready, do not need extra efforts to handle domain/https</li>\n<li>Very stable and reliable</li>\n</ol>\n<p>*Be aware that AWS Lambda <strong>ONLY works in linux</strong> on an x64 architecture. For <strong>non-linux os</strong>, we need <strong>docker</strong> to build dependencies, should <a href=\"https://docs.docker.com/docker-for-mac/\" target=\"_blank\" rel=\"noopener\">install docker</a> first.</p>\n<p>This requires Nodejs 8.10+/npm, recommend using <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a> to install nodejs/npm.</p>\n<p>Get an AWS account, create <code>aws_access_key_id</code> and <code>aws_secret_access_key</code> and place them in <code>~/.aws/credentials</code>, like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[default]</span><br><span class=\"line\">aws_access_key_id = &lt;your aws_access_key_id&gt;</span><br><span class=\"line\">aws_secret_access_key = &lt;your aws_secret_access_key&gt;</span><br></pre></td></tr></table></figure>\n<p>For more information, refer to <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp dev/lambda/serverless.sample.yml dev/lambda/serverless.yml</span><br></pre></td></tr></table></figure>\n<p>Edit <code>dev/lambda/serverless.yml</code>, and make sure you set the proper name and required env.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># you can define service wide environment variables here</span></span><br><span class=\"line\"><span class=\"attr\">  environment:</span></span><br><span class=\"line\"><span class=\"attr\">    ENV:</span> <span class=\"string\">production</span></span><br><span class=\"line\">    <span class=\"comment\"># ringcentral apps</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## for bots auth, required</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_BOT_CLIENT_ID:</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_BOT_CLIENT_SECRET:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## for user auth, could be empty if do not need user auth</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_USER_CLIENT_ID:</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_USER_CLIENT_SECRET:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## common</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_SERVER:</span> <span class=\"attr\">https://platform.devtest.ringcentral.com</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_BOT_SERVER:</span> <span class=\"attr\">https://xxxxx.execute-api.us-east-1.amazonaws.com/dev</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># db</span></span><br><span class=\"line\"><span class=\"attr\">    DB_TYPE:</span> <span class=\"string\">dynamodb</span></span><br><span class=\"line\"><span class=\"attr\">    DYNAMODB_TABLE_PREFIX:</span> <span class=\"string\">ringcentral-bot</span></span><br><span class=\"line\"><span class=\"attr\">    DYNAMODB_REGION:</span> <span class=\"string\">us-east-1</span></span><br><span class=\"line\"><span class=\"attr\">    DYNAMODB_ReadCapacityUnits:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    DYNAMODB_WriteCapacityUnits:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>Deploy to AWS Lambda with <code>bin/deploy</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Run this cmd to deploy to AWS Lambda</span></span><br><span class=\"line\">bin/deploy</span><br></pre></td></tr></table></figure>\n<p>After successful deploy, you will get the https api url:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Service Information</span><br><span class=\"line\">service: ringcentral-bot</span><br><span class=\"line\">stage: dev</span><br><span class=\"line\">region: us-east-1</span><br><span class=\"line\">stack: ringcentral-bot-dev</span><br><span class=\"line\">api keys:</span><br><span class=\"line\">  None</span><br><span class=\"line\">endpoints:</span><br><span class=\"line\">  ANY - https://dddddd.execute-api.us-east-1.amazonaws.com/dev/&#123;action+&#125;</span><br><span class=\"line\">  GET - https://dddddd.execute-api.us-east-1.amazonaws.com/dev/</span><br></pre></td></tr></table></figure>\n<p>Relpace <code>RINGCENTRAL_BOT_SERVER: https://xxxxx.execute-api.us-east-1.amazonaws.com/dev</code> in serverless.yml with<br><code>RINGCENTRAL_BOT_SERVER: https://dddddd.execute-api.us-east-1.amazonaws.com/dev</code><br> and run <code>bin/deploy</code> to deploy again.</p>\n<p>Watch Lambda server log by run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/watch</span><br></pre></td></tr></table></figure>\n<p>Do not forget to set your RingCentral app’s redirect URL to Lambda’s API Gateway URL, <code>https://dddddd.execute-api.us-east-1.amazonaws.com/dev/bot-oauth</code> for bot app.</p>\n<h2 id=\"Use-Extensions\"><a href=\"#Use-Extensions\" class=\"headerlink\" title=\"Use Extensions\"></a>Use Extensions</h2><p>RingCentral Chatbot Framework for Python Extensions will extend bot command support with simple settings in <code>.env</code>.</p>\n<p>Just set like this in <code>.env</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXTENSIONS=ringcentral_bot_framework_extension_botinfo,ringcentral_bot_framework_extension_some_other_extension</span><br></pre></td></tr></table></figure>\n<p>And install these exetnsions by <code>pip install ringcentral_bot_framework_extension_botinfo ringcentral_bot_framework_extension_some_other_extension</code>, it is done.</p>\n<p><img src=\"https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info/raw/master/screenshots/ss.png\" alt=\" \"></p>\n<p>You can search for more extension in <a href=\"https://pypi.org\" target=\"_blank\" rel=\"noopener\">pypi.org</a> with keyword <code>ringcentral_bot_framework_extension</code>.</p>\n<h2 id=\"Write-a-extension-yourself\"><a href=\"#Write-a-extension-yourself\" class=\"headerlink\" title=\"Write a extension yourself\"></a>Write a extension yourself</h2><p>Writing extension is simple, just check out <a href=\"https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info\" target=\"_blank\" rel=\"noopener\">botinfo extension</a> as an example, you just need to write one function <code>botGotPostAddAction</code> there.</p>\n<p>Make sure you follow the naming rule: starts with <code>ringcentral_bot_framework_extension_</code> and publish to pypi.org and it is done!</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># botinfo extension's source code</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info/blob/master/ringcentral_bot_framework_extension_botinfo/__init__.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">'ringcentral_bot_framework_extension_botinfo'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">botGotPostAddAction</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  bot,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  groupId,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  creatorId,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  user,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  text,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  dbAction</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  bot got group chat message: text</span></span><br><span class=\"line\"><span class=\"string\">  bot extension could send some response</span></span><br><span class=\"line\"><span class=\"string\">  return True when bot send message, otherwise return False</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;bot.id&#125;</span>)'</span> <span class=\"keyword\">in</span> text:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"string\">'bot info'</span> <span class=\"keyword\">in</span> text:</span><br><span class=\"line\">    botInfo = bot.platform.get(<span class=\"string\">'/account/~/extension/~'</span>)</span><br><span class=\"line\">    txt = json.loads(botInfo.text())</span><br><span class=\"line\">    txt = json.dumps(txt, indent=<span class=\"number\">2</span>)</span><br><span class=\"line\">    msg = <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;creatorId&#125;</span>) bot info json is:\\n'</span> + txt</span><br><span class=\"line\"></span><br><span class=\"line\">    bot.sendMessage(</span><br><span class=\"line\">      groupId,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">'text'</span>: msg</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Credits\"><a href=\"#Credits\" class=\"headerlink\" title=\"Credits\"></a>Credits</h2><ul>\n<li><p>The core bot framework logic is implanted from <a href=\"https://github.com/ringcentral-tutorials/ringcentral-ai-bot\" target=\"_blank\" rel=\"noopener\">ringcentral-ai-bot</a> written by <a href=\"https://github.com/tylerlong\" target=\"_blank\" rel=\"noopener\">@tylerlong</a></p>\n</li>\n<li><p>Also check tyler’s js bot framework <a href=\"https://github.com/ringcentral/ringcentral-chatbot-js\" target=\"_blank\" rel=\"noopener\">https://github.com/ringcentral/ringcentral-chatbot-js</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://github.com/zxdong262/ringcentral-chatbot-factory-py/blob/master/screenshots/wanted.jpg?raw=true\" alt=\" \"></p>\n<p>This is a intro blog about my recent work: <a href=\"https://github.com/zxdong262/ringcentral-chatbot-python\" target=\"_blank\" rel=\"noopener\">ringcentral-chatbot-python</a>.</p>\n<p>The project is part of our chatbot plan: make writing a glip chatbot easy and fun. It is not mature enough for public yet, still need to add more documents and features.</p>\n<p>It does work and is really easy to work with, you do not even need to know any python to get it running and talking. So RingCentral developers, let’s create some chatbot with python, and give some feedback.</p>\n<h2 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h2><ul>\n<li>Python3.6+ and Pip3</li>\n<li>Create the bot App: Login to <a href=\"https://developer.ringcentral.com\" target=\"_blank\" rel=\"noopener\">developer.ringcentral.com</a> and create an <code>public</code> <code>Server/Bot</code> app with permissions: <code>ReadContacts, ReadMessages, ReadPresence, Contacts, ReadAccounts, SMS, InternalMessages, ReadCallLog, ReadCallRecording, WebhookSubscriptions, Glip</code></li>\n</ul>\n<h2 id=\"Getting-started\"><a href=\"#Getting-started\" class=\"headerlink\" title=\"Getting started\"></a>Getting started</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install ringcentral_chatbot_factory</span><br><span class=\"line\"></span><br><span class=\"line\">rcf my-ringcentral-chat-bot</span><br><span class=\"line\"><span class=\"comment\"># then carefully answer all questions, then the my-app folder will be created</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># follow the instruction of my-app/README.md to dev/run/test the bot</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> my-ringcentral-chat-bot</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use virtualenv</span></span><br><span class=\"line\">pip3 install virtualenv <span class=\"comment\"># might need sudo</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># init virtual env</span></span><br><span class=\"line\">virtualenv venv --python=python3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># use env</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> ./venv/bin/activate</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># install required modules</span></span><br><span class=\"line\">pip install -r requirements.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># run ngrok proxy</span></span><br><span class=\"line\"><span class=\"comment\"># since bot need https server,</span></span><br><span class=\"line\"><span class=\"comment\"># so we need a https proxy for RingCentral to visit our local server</span></span><br><span class=\"line\">./bin/proxy</span><br><span class=\"line\"><span class=\"comment\"># will show:</span></span><br><span class=\"line\"><span class=\"comment\"># Forwarding https://xxxxx.ngrok.io -&gt; localhost:9890</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># create env file</span></span><br><span class=\"line\"><span class=\"comment\"># .env already created from .sample.env</span></span><br><span class=\"line\"><span class=\"comment\"># just edit .env, set proper setting,</span></span><br><span class=\"line\">RINGCENTRAL_BOT_SERVER=https://xxxxx.ngrok.io</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## for bots auth required, get them from your RingCentral app page</span></span><br><span class=\"line\">RINGCENTRAL_BOT_CLIENT_ID=</span><br><span class=\"line\">RINGCENTRAL_BOT_CLIENT_SECRET=</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># and goto your RingCentral app setting page, set OAuth Redirect URI to https://https://xxxxx.ngrok.io/bot-oauth</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># run local dev server</span></span><br><span class=\"line\">./bin/start</span><br></pre></td></tr></table></figure>\n<h2 id=\"Test-bot\"><a href=\"#Test-bot\" class=\"headerlink\" title=\"Test bot\"></a>Test bot</h2><ul>\n<li>Goto your RingCentral app’s bot section, click ‘Add to glip’</li>\n<li>Login to <a href=\"https://glip-app.devtest.ringcentral.com\" target=\"_blank\" rel=\"noopener\">https://glip-app.devtest.ringcentral.com</a>, find the bot by searching its name. Talk to the bot.</li>\n<li>Edit config.py to change bot bahavior and test in <a href=\"https://glip-app.devtest.ringcentral.com\" target=\"_blank\" rel=\"noopener\">https://glip-app.devtest.ringcentral.com</a></li>\n</ul>\n<h2 id=\"Let’s-write-some-bot-logic\"><a href=\"#Let’s-write-some-bot-logic\" class=\"headerlink\" title=\"Let’s write some bot logic\"></a>Let’s write some bot logic</h2><p>let’s write a bot that can tell server time/date as a hello world bot.</p>\n<p>First, create bot config file by <code>cp config.sample.py config.py</code></p>\n<p>Then Edit <code>config.py</code>, like this:</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">sample config module</span></span><br><span class=\"line\"><span class=\"string\">run \"cp config.sample.py config.py\" to create local config</span></span><br><span class=\"line\"><span class=\"string\">edit config.py functions to override default bot behavior</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> datetime <span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"></span><br><span class=\"line\">__name__ = <span class=\"string\">'localConfig'</span></span><br><span class=\"line\">__package__ = <span class=\"string\">'ringcentral_bot_framework'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">helpMsg</span><span class=\"params\">(botId)</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">f'''Hello, I am a date/time chatbot. Please reply \"@![:Person](<span class=\"subst\">&#123;botId&#125;</span>) **cmd**\" if you want to talk to me.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">**cmd** list</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">**date** -- show current date</span></span><br><span class=\"line\"><span class=\"string\">**time** -- show current time</span></span><br><span class=\"line\"><span class=\"string\">  '''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">botJoinPrivateChatAction</span><span class=\"params\">(bot, groupId, user, dbAction)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  bot join private chat event handler</span></span><br><span class=\"line\"><span class=\"string\">  bot could send some welcome message or help, or something else</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  text = helpMsg(bot.id)</span><br><span class=\"line\">  bot.sendMessage(</span><br><span class=\"line\">    groupId,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"string\">'text'</span>: text</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">botGotPostAddAction</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  bot,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  groupId,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  creatorId,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  user,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  text,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  dbAction,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  handledByExtension</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  bot got group chat message: text</span></span><br><span class=\"line\"><span class=\"string\">  bot could send some response</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> handledByExtension:</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> text == <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;bot.id&#125;</span>) date'</span>:</span><br><span class=\"line\">    date = str(datetime.now().strftime(<span class=\"string\">'%Y-%m-%d'</span>))</span><br><span class=\"line\">    bot.sendMessage(</span><br><span class=\"line\">      groupId,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">'text'</span>: <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;creatorId&#125;</span>), current date is <span class=\"subst\">&#123;date&#125;</span>'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  <span class=\"keyword\">elif</span> text == <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;bot.id&#125;</span>) time'</span>:</span><br><span class=\"line\">    time = str(datetime.now().strftime(<span class=\"string\">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class=\"line\">    bot.sendMessage(</span><br><span class=\"line\">      groupId,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">'text'</span>: <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;creatorId&#125;</span>), current time is <span class=\"subst\">&#123;time&#125;</span>'</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  <span class=\"keyword\">elif</span> <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;bot.id&#125;</span>)'</span> <span class=\"keyword\">in</span> text:</span><br><span class=\"line\">    bot.sendMessage(</span><br><span class=\"line\">      groupId,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">'text'</span>: helpMsg(bot.id)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br></pre></td></tr></table></figure>\n<p>Then try talk to the bot in <a href=\"https://glip-app.devtest.ringcentral.com\" target=\"_blank\" rel=\"noopener\">https://glip-app.devtest.ringcentral.com</a>, see how it work.</p>\n<p>That is it. You can just focus on the bot logic.</p>\n<p>If you want to access user data, subscribe to user event, or use different database, just check these examples.</p>\n<h2 id=\"Example-bots\"><a href=\"#Example-bots\" class=\"headerlink\" title=\"Example bots\"></a>Example bots</h2><ul>\n<li><a href=\"https://github.com/zxdong262/ringcentral-date-time-chatbot\" target=\"_blank\" rel=\"noopener\">date-time-chatbot</a>: simple RingCentral chatbot that can tell server time/date.</li>\n<li><a href=\"https://github.com/zxdong262/ringcentral-assistant-bot\" target=\"_blank\" rel=\"noopener\">assistant-bot</a>: simple assistant Glip bot to show user/company information, this bot will show you how to access user data.</li>\n<li><a href=\"https://github.com/zxdong262/ringcentral-survey-bot\" target=\"_blank\" rel=\"noopener\">survey-bot</a>: example survey bot, this bot will show you how to create/use custom database wrapper.</li>\n</ul>\n<h2 id=\"Deploy-to-AWS-Lambda\"><a href=\"#Deploy-to-AWS-Lambda\" class=\"headerlink\" title=\"Deploy to AWS Lambda\"></a>Deploy to AWS Lambda</h2><p>If you are satisfied with the bot, time to deploy to production server, I would suggest AWS Lambda for these reasons:</p>\n<ol>\n<li>Free tier gives 1000000 free run per month</li>\n<li>Https ready, do not need extra efforts to handle domain/https</li>\n<li>Very stable and reliable</li>\n</ol>\n<p>*Be aware that AWS Lambda <strong>ONLY works in linux</strong> on an x64 architecture. For <strong>non-linux os</strong>, we need <strong>docker</strong> to build dependencies, should <a href=\"https://docs.docker.com/docker-for-mac/\" target=\"_blank\" rel=\"noopener\">install docker</a> first.</p>\n<p>This requires Nodejs 8.10+/npm, recommend using <a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"noopener\">nvm</a> to install nodejs/npm.</p>\n<p>Get an AWS account, create <code>aws_access_key_id</code> and <code>aws_secret_access_key</code> and place them in <code>~/.aws/credentials</code>, like this:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[default]</span><br><span class=\"line\">aws_access_key_id = &lt;your aws_access_key_id&gt;</span><br><span class=\"line\">aws_secret_access_key = &lt;your aws_secret_access_key&gt;</span><br></pre></td></tr></table></figure>\n<p>For more information, refer to <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html\" target=\"_blank\" rel=\"noopener\">https://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html</a></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp dev/lambda/serverless.sample.yml dev/lambda/serverless.yml</span><br></pre></td></tr></table></figure>\n<p>Edit <code>dev/lambda/serverless.yml</code>, and make sure you set the proper name and required env.</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># you can define service wide environment variables here</span></span><br><span class=\"line\"><span class=\"attr\">  environment:</span></span><br><span class=\"line\"><span class=\"attr\">    ENV:</span> <span class=\"string\">production</span></span><br><span class=\"line\">    <span class=\"comment\"># ringcentral apps</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## for bots auth, required</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_BOT_CLIENT_ID:</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_BOT_CLIENT_SECRET:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## for user auth, could be empty if do not need user auth</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_USER_CLIENT_ID:</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_USER_CLIENT_SECRET:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">## common</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_SERVER:</span> <span class=\"attr\">https://platform.devtest.ringcentral.com</span></span><br><span class=\"line\"><span class=\"attr\">    RINGCENTRAL_BOT_SERVER:</span> <span class=\"attr\">https://xxxxx.execute-api.us-east-1.amazonaws.com/dev</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># db</span></span><br><span class=\"line\"><span class=\"attr\">    DB_TYPE:</span> <span class=\"string\">dynamodb</span></span><br><span class=\"line\"><span class=\"attr\">    DYNAMODB_TABLE_PREFIX:</span> <span class=\"string\">ringcentral-bot</span></span><br><span class=\"line\"><span class=\"attr\">    DYNAMODB_REGION:</span> <span class=\"string\">us-east-1</span></span><br><span class=\"line\"><span class=\"attr\">    DYNAMODB_ReadCapacityUnits:</span> <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"attr\">    DYNAMODB_WriteCapacityUnits:</span> <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>Deploy to AWS Lambda with <code>bin/deploy</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Run this cmd to deploy to AWS Lambda</span></span><br><span class=\"line\">bin/deploy</span><br></pre></td></tr></table></figure>\n<p>After successful deploy, you will get the https api url:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Service Information</span><br><span class=\"line\">service: ringcentral-bot</span><br><span class=\"line\">stage: dev</span><br><span class=\"line\">region: us-east-1</span><br><span class=\"line\">stack: ringcentral-bot-dev</span><br><span class=\"line\">api keys:</span><br><span class=\"line\">  None</span><br><span class=\"line\">endpoints:</span><br><span class=\"line\">  ANY - https://dddddd.execute-api.us-east-1.amazonaws.com/dev/&#123;action+&#125;</span><br><span class=\"line\">  GET - https://dddddd.execute-api.us-east-1.amazonaws.com/dev/</span><br></pre></td></tr></table></figure>\n<p>Relpace <code>RINGCENTRAL_BOT_SERVER: https://xxxxx.execute-api.us-east-1.amazonaws.com/dev</code> in serverless.yml with<br><code>RINGCENTRAL_BOT_SERVER: https://dddddd.execute-api.us-east-1.amazonaws.com/dev</code><br> and run <code>bin/deploy</code> to deploy again.</p>\n<p>Watch Lambda server log by run:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/watch</span><br></pre></td></tr></table></figure>\n<p>Do not forget to set your RingCentral app’s redirect URL to Lambda’s API Gateway URL, <code>https://dddddd.execute-api.us-east-1.amazonaws.com/dev/bot-oauth</code> for bot app.</p>\n<h2 id=\"Use-Extensions\"><a href=\"#Use-Extensions\" class=\"headerlink\" title=\"Use Extensions\"></a>Use Extensions</h2><p>RingCentral Chatbot Framework for Python Extensions will extend bot command support with simple settings in <code>.env</code>.</p>\n<p>Just set like this in <code>.env</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EXTENSIONS=ringcentral_bot_framework_extension_botinfo,ringcentral_bot_framework_extension_some_other_extension</span><br></pre></td></tr></table></figure>\n<p>And install these exetnsions by <code>pip install ringcentral_bot_framework_extension_botinfo ringcentral_bot_framework_extension_some_other_extension</code>, it is done.</p>\n<p><img src=\"https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info/raw/master/screenshots/ss.png\" alt=\" \"></p>\n<p>You can search for more extension in <a href=\"https://pypi.org\" target=\"_blank\" rel=\"noopener\">pypi.org</a> with keyword <code>ringcentral_bot_framework_extension</code>.</p>\n<h2 id=\"Write-a-extension-yourself\"><a href=\"#Write-a-extension-yourself\" class=\"headerlink\" title=\"Write a extension yourself\"></a>Write a extension yourself</h2><p>Writing extension is simple, just check out <a href=\"https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info\" target=\"_blank\" rel=\"noopener\">botinfo extension</a> as an example, you just need to write one function <code>botGotPostAddAction</code> there.</p>\n<p>Make sure you follow the naming rule: starts with <code>ringcentral_bot_framework_extension_</code> and publish to pypi.org and it is done!</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># botinfo extension's source code</span></span><br><span class=\"line\"><span class=\"comment\"># https://github.com/zxdong262/ringcentral-chatbot-python-ext-bot-info/blob/master/ringcentral_bot_framework_extension_botinfo/__init__.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\">name = <span class=\"string\">'ringcentral_bot_framework_extension_botinfo'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">botGotPostAddAction</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  bot,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  groupId,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  creatorId,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  user,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  text,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">  dbAction</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">)</span>:</span></span><br><span class=\"line\">  <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">  bot got group chat message: text</span></span><br><span class=\"line\"><span class=\"string\">  bot extension could send some response</span></span><br><span class=\"line\"><span class=\"string\">  return True when bot send message, otherwise return False</span></span><br><span class=\"line\"><span class=\"string\">  \"\"\"</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;bot.id&#125;</span>)'</span> <span class=\"keyword\">in</span> text:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"string\">'bot info'</span> <span class=\"keyword\">in</span> text:</span><br><span class=\"line\">    botInfo = bot.platform.get(<span class=\"string\">'/account/~/extension/~'</span>)</span><br><span class=\"line\">    txt = json.loads(botInfo.text())</span><br><span class=\"line\">    txt = json.dumps(txt, indent=<span class=\"number\">2</span>)</span><br><span class=\"line\">    msg = <span class=\"string\">f'![:Person](<span class=\"subst\">&#123;creatorId&#125;</span>) bot info json is:\\n'</span> + txt</span><br><span class=\"line\"></span><br><span class=\"line\">    bot.sendMessage(</span><br><span class=\"line\">      groupId,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">'text'</span>: msg</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">False</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Credits\"><a href=\"#Credits\" class=\"headerlink\" title=\"Credits\"></a>Credits</h2><ul>\n<li><p>The core bot framework logic is implanted from <a href=\"https://github.com/ringcentral-tutorials/ringcentral-ai-bot\" target=\"_blank\" rel=\"noopener\">ringcentral-ai-bot</a> written by <a href=\"https://github.com/tylerlong\" target=\"_blank\" rel=\"noopener\">@tylerlong</a></p>\n</li>\n<li><p>Also check tyler’s js bot framework <a href=\"https://github.com/ringcentral/ringcentral-chatbot-js\" target=\"_blank\" rel=\"noopener\">https://github.com/ringcentral/ringcentral-chatbot-js</a></p>\n</li>\n</ul>\n"},{"layout":"post","title":"Why Progressive Web App is the future of Client app","date":"2018-12-10T02:00:00.000Z","author":"Embbnux Ji","_content":"\n![ ](https://cdn-images-1.medium.com/max/1600/1*wf0nzvLDFABh3X60lgOQdw.png)\n\nAs React.js and Vue.js become more and more popular, we have a lot of single page web applications now. They bring great user experience and technology advancements. But what's next. It is Progressive Web Apps. With Progressive Web Apps, you make your web app having great user experience as native app.\n\n## Speed up web client\n\nA big issue of web application is network. User need network to get data or redirect. With poor network or no network, your web app will be broken. Progressive Web Apps make our client work when offline. You can cache assets files or event API request in local caches, so app can still function when network is offline.\n\nWe can cache App shell that can be built with React.js in local cahce. So When we use refresh web page, app doesn't have to load JS file from network to reduce blank screen time.\n\nIn service worker, we can get fetch event when client creates a network request, so we can return cache data to request when the cache data is not expired. There are many ways to play with requests in service worker. You can even queue your request to avoid rate limit problems. But I think an awesome way is use service worker as a middle layer server.\n\n## Use service worker as middle layer server\n\nIn server side, we may use Node.js server as middle layer to merge API requests and send formatted data to frontend. In server worker, we can also build a middle layer.\n\nTo create a new API in service worker:\n\n```js\n// In service worker\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js');\n\n// will create a API `/newAPI`\nworkbox.routing.registerRoute(\n  '/newAPI',\n  ({url, event}) => {\n    const responseData = {\n      id: '123',\n      name: 'test'\n    };\n    return new Response(\n      JSON.stringify(responseData), {\n        headers: { 'Content-Type': 'application/json' }\n      }\n    );\n  }\n);\n```\n\nUse server worker as middle layer server:\n\n```js\n// In service worker\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js');\n\n// will create a API `/news.json`\nworkbox.routing.registerRoute(\n  '/news.json',\n  async ({url, event}) => {\n    console.log(url);\n    const idsResponse = await fetch('https://hacker-news.firebaseio.com/v0/topstories.json?orderBy=%22$key%22&startAt=%220%22&endAt=%225%22')\n    const idMaps = await idsResponse.json()\n    const ids = Object.keys(idMaps).map(key => idMaps[key]);\n    const newsList = await Promise.all(\n      ids.map(async (id) => {\n        const response = await fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)\n        const news = await response.json()\n        return news\n      })\n    )\n    return new Response(\n      JSON.stringify(newsList), {\n        headers: { 'Content-Type': 'application/json' }\n      }\n    );\n  }\n);\n```\n\n[Workbox](https://developers.google.com/web/tools/workbox/) is new tool from Google to help build progressive web apps.\nFor server-side notification, we can use [Push Notification](https://developers.google.com/web/ilt/pwa/introduction-to-push-notifications) api to get notification from server-side in service worker. And use [Client.postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage) to notify client app.\n\n## Other framework like progressive web app\n\nNow progressive web app works well in mobile browser, user can add app to their home screen to use it as a native app in Android and iOS. For some popular apps, they provide some framework to allow developer to embed their cross-platform app, such as WeChat's Mini-Programs, Facebook's instant games and Google's instant apps. They are very similar with progressive web app. \n\nWith those framework, users don't need to install apps, just open it and use it. Those apps are becoming more and more popular, because they are easy to developer and cross-platform. If you are a client developer, you should pay more attention on them.\n\n![ ](https://cdn-images-1.medium.com/max/1600/1*h_D5wqHdJjsDIVLkbDqLNQ.jpeg)\n\nFor WeChat's mini-program, it is built with JS and template like HTML. So it gets a lot of developers from Web developers, and grows very quickly. WeChat's mini-program makes it easy to integrate third party service with WeChat.\n\nI think those frameworks are same idea  just with different technology. They are like web application with native enhancement. So it is same as Progressive Web Apps. But I think Progressive web apps are more common. It's a real web app and easier to learn and use.\n\n## Conclusion\n\nProgressive web apps can give our apps great user experience. With progressive web app, we can speed up our web application. We can also use service worker as a server. There are some framework like PWA such as WeChat's Mini-Programs, Facebook's instant games and Google's instant apps. They have been becoming more and more popular, we should also pay more attention at them.\n\nI have run RingCentral JS SDK in service worker, it works well with restful API request, except pubnub. Pubnub's JS SDK doesn't work in service worker because of its http library. We can try to update pubnub sdk codes or use Push notification of service woker.\n","source":"_posts/2018-12-10-why-progressive-web-app-is-the-future-of-client-app.md","raw":"---\nlayout: post\ntitle:  \"Why Progressive Web App is the future of Client app\"\ndate:   2018-12-10 10:00:00 +0800\ncategories: blog\nauthor: Embbnux Ji\n---\n\n![ ](https://cdn-images-1.medium.com/max/1600/1*wf0nzvLDFABh3X60lgOQdw.png)\n\nAs React.js and Vue.js become more and more popular, we have a lot of single page web applications now. They bring great user experience and technology advancements. But what's next. It is Progressive Web Apps. With Progressive Web Apps, you make your web app having great user experience as native app.\n\n## Speed up web client\n\nA big issue of web application is network. User need network to get data or redirect. With poor network or no network, your web app will be broken. Progressive Web Apps make our client work when offline. You can cache assets files or event API request in local caches, so app can still function when network is offline.\n\nWe can cache App shell that can be built with React.js in local cahce. So When we use refresh web page, app doesn't have to load JS file from network to reduce blank screen time.\n\nIn service worker, we can get fetch event when client creates a network request, so we can return cache data to request when the cache data is not expired. There are many ways to play with requests in service worker. You can even queue your request to avoid rate limit problems. But I think an awesome way is use service worker as a middle layer server.\n\n## Use service worker as middle layer server\n\nIn server side, we may use Node.js server as middle layer to merge API requests and send formatted data to frontend. In server worker, we can also build a middle layer.\n\nTo create a new API in service worker:\n\n```js\n// In service worker\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js');\n\n// will create a API `/newAPI`\nworkbox.routing.registerRoute(\n  '/newAPI',\n  ({url, event}) => {\n    const responseData = {\n      id: '123',\n      name: 'test'\n    };\n    return new Response(\n      JSON.stringify(responseData), {\n        headers: { 'Content-Type': 'application/json' }\n      }\n    );\n  }\n);\n```\n\nUse server worker as middle layer server:\n\n```js\n// In service worker\nimportScripts('https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js');\n\n// will create a API `/news.json`\nworkbox.routing.registerRoute(\n  '/news.json',\n  async ({url, event}) => {\n    console.log(url);\n    const idsResponse = await fetch('https://hacker-news.firebaseio.com/v0/topstories.json?orderBy=%22$key%22&startAt=%220%22&endAt=%225%22')\n    const idMaps = await idsResponse.json()\n    const ids = Object.keys(idMaps).map(key => idMaps[key]);\n    const newsList = await Promise.all(\n      ids.map(async (id) => {\n        const response = await fetch(`https://hacker-news.firebaseio.com/v0/item/${id}.json`)\n        const news = await response.json()\n        return news\n      })\n    )\n    return new Response(\n      JSON.stringify(newsList), {\n        headers: { 'Content-Type': 'application/json' }\n      }\n    );\n  }\n);\n```\n\n[Workbox](https://developers.google.com/web/tools/workbox/) is new tool from Google to help build progressive web apps.\nFor server-side notification, we can use [Push Notification](https://developers.google.com/web/ilt/pwa/introduction-to-push-notifications) api to get notification from server-side in service worker. And use [Client.postMessage](https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage) to notify client app.\n\n## Other framework like progressive web app\n\nNow progressive web app works well in mobile browser, user can add app to their home screen to use it as a native app in Android and iOS. For some popular apps, they provide some framework to allow developer to embed their cross-platform app, such as WeChat's Mini-Programs, Facebook's instant games and Google's instant apps. They are very similar with progressive web app. \n\nWith those framework, users don't need to install apps, just open it and use it. Those apps are becoming more and more popular, because they are easy to developer and cross-platform. If you are a client developer, you should pay more attention on them.\n\n![ ](https://cdn-images-1.medium.com/max/1600/1*h_D5wqHdJjsDIVLkbDqLNQ.jpeg)\n\nFor WeChat's mini-program, it is built with JS and template like HTML. So it gets a lot of developers from Web developers, and grows very quickly. WeChat's mini-program makes it easy to integrate third party service with WeChat.\n\nI think those frameworks are same idea  just with different technology. They are like web application with native enhancement. So it is same as Progressive Web Apps. But I think Progressive web apps are more common. It's a real web app and easier to learn and use.\n\n## Conclusion\n\nProgressive web apps can give our apps great user experience. With progressive web app, we can speed up our web application. We can also use service worker as a server. There are some framework like PWA such as WeChat's Mini-Programs, Facebook's instant games and Google's instant apps. They have been becoming more and more popular, we should also pay more attention at them.\n\nI have run RingCentral JS SDK in service worker, it works well with restful API request, except pubnub. Pubnub's JS SDK doesn't work in service worker because of its http library. We can try to update pubnub sdk codes or use Push notification of service woker.\n","slug":"2018-12-10-why-progressive-web-app-is-the-future-of-client-app","published":1,"updated":"2018-12-26T03:28:06.254Z","comments":1,"photos":[],"link":"","_id":"cjq4mdvep0007tci54ygqpoko","content":"<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*wf0nzvLDFABh3X60lgOQdw.png\" alt=\" \"></p>\n<p>As React.js and Vue.js become more and more popular, we have a lot of single page web applications now. They bring great user experience and technology advancements. But what’s next. It is Progressive Web Apps. With Progressive Web Apps, you make your web app having great user experience as native app.</p>\n<h2 id=\"Speed-up-web-client\"><a href=\"#Speed-up-web-client\" class=\"headerlink\" title=\"Speed up web client\"></a>Speed up web client</h2><p>A big issue of web application is network. User need network to get data or redirect. With poor network or no network, your web app will be broken. Progressive Web Apps make our client work when offline. You can cache assets files or event API request in local caches, so app can still function when network is offline.</p>\n<p>We can cache App shell that can be built with React.js in local cahce. So When we use refresh web page, app doesn’t have to load JS file from network to reduce blank screen time.</p>\n<p>In service worker, we can get fetch event when client creates a network request, so we can return cache data to request when the cache data is not expired. There are many ways to play with requests in service worker. You can even queue your request to avoid rate limit problems. But I think an awesome way is use service worker as a middle layer server.</p>\n<h2 id=\"Use-service-worker-as-middle-layer-server\"><a href=\"#Use-service-worker-as-middle-layer-server\" class=\"headerlink\" title=\"Use service worker as middle layer server\"></a>Use service worker as middle layer server</h2><p>In server side, we may use Node.js server as middle layer to merge API requests and send formatted data to frontend. In server worker, we can also build a middle layer.</p>\n<p>To create a new API in service worker:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In service worker</span></span><br><span class=\"line\">importScripts(<span class=\"string\">'https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// will create a API `/newAPI`</span></span><br><span class=\"line\">workbox.routing.registerRoute(</span><br><span class=\"line\">  <span class=\"string\">'/newAPI'</span>,</span><br><span class=\"line\">  (&#123;url, event&#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> responseData = &#123;</span><br><span class=\"line\">      id: <span class=\"string\">'123'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'test'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(</span><br><span class=\"line\">      <span class=\"built_in\">JSON</span>.stringify(responseData), &#123;</span><br><span class=\"line\">        headers: &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Use server worker as middle layer server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In service worker</span></span><br><span class=\"line\">importScripts(<span class=\"string\">'https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// will create a API `/news.json`</span></span><br><span class=\"line\">workbox.routing.registerRoute(</span><br><span class=\"line\">  <span class=\"string\">'/news.json'</span>,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> (&#123;url, event&#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(url);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> idsResponse = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'https://hacker-news.firebaseio.com/v0/topstories.json?orderBy=%22$key%22&amp;startAt=%220%22&amp;endAt=%225%22'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> idMaps = <span class=\"keyword\">await</span> idsResponse.json()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ids = <span class=\"built_in\">Object</span>.keys(idMaps).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> idMaps[key]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newsList = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">      ids.map(<span class=\"keyword\">async</span> (id) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">`https://hacker-news.firebaseio.com/v0/item/<span class=\"subst\">$&#123;id&#125;</span>.json`</span>)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> news = <span class=\"keyword\">await</span> response.json()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> news</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(</span><br><span class=\"line\">      <span class=\"built_in\">JSON</span>.stringify(newsList), &#123;</span><br><span class=\"line\">        headers: &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developers.google.com/web/tools/workbox/\" target=\"_blank\" rel=\"noopener\">Workbox</a> is new tool from Google to help build progressive web apps.<br>For server-side notification, we can use <a href=\"https://developers.google.com/web/ilt/pwa/introduction-to-push-notifications\" target=\"_blank\" rel=\"noopener\">Push Notification</a> api to get notification from server-side in service worker. And use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" target=\"_blank\" rel=\"noopener\">Client.postMessage</a> to notify client app.</p>\n<h2 id=\"Other-framework-like-progressive-web-app\"><a href=\"#Other-framework-like-progressive-web-app\" class=\"headerlink\" title=\"Other framework like progressive web app\"></a>Other framework like progressive web app</h2><p>Now progressive web app works well in mobile browser, user can add app to their home screen to use it as a native app in Android and iOS. For some popular apps, they provide some framework to allow developer to embed their cross-platform app, such as WeChat’s Mini-Programs, Facebook’s instant games and Google’s instant apps. They are very similar with progressive web app. </p>\n<p>With those framework, users don’t need to install apps, just open it and use it. Those apps are becoming more and more popular, because they are easy to developer and cross-platform. If you are a client developer, you should pay more attention on them.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*h_D5wqHdJjsDIVLkbDqLNQ.jpeg\" alt=\" \"></p>\n<p>For WeChat’s mini-program, it is built with JS and template like HTML. So it gets a lot of developers from Web developers, and grows very quickly. WeChat’s mini-program makes it easy to integrate third party service with WeChat.</p>\n<p>I think those frameworks are same idea  just with different technology. They are like web application with native enhancement. So it is same as Progressive Web Apps. But I think Progressive web apps are more common. It’s a real web app and easier to learn and use.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Progressive web apps can give our apps great user experience. With progressive web app, we can speed up our web application. We can also use service worker as a server. There are some framework like PWA such as WeChat’s Mini-Programs, Facebook’s instant games and Google’s instant apps. They have been becoming more and more popular, we should also pay more attention at them.</p>\n<p>I have run RingCentral JS SDK in service worker, it works well with restful API request, except pubnub. Pubnub’s JS SDK doesn’t work in service worker because of its http library. We can try to update pubnub sdk codes or use Push notification of service woker.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*wf0nzvLDFABh3X60lgOQdw.png\" alt=\" \"></p>\n<p>As React.js and Vue.js become more and more popular, we have a lot of single page web applications now. They bring great user experience and technology advancements. But what’s next. It is Progressive Web Apps. With Progressive Web Apps, you make your web app having great user experience as native app.</p>\n<h2 id=\"Speed-up-web-client\"><a href=\"#Speed-up-web-client\" class=\"headerlink\" title=\"Speed up web client\"></a>Speed up web client</h2><p>A big issue of web application is network. User need network to get data or redirect. With poor network or no network, your web app will be broken. Progressive Web Apps make our client work when offline. You can cache assets files or event API request in local caches, so app can still function when network is offline.</p>\n<p>We can cache App shell that can be built with React.js in local cahce. So When we use refresh web page, app doesn’t have to load JS file from network to reduce blank screen time.</p>\n<p>In service worker, we can get fetch event when client creates a network request, so we can return cache data to request when the cache data is not expired. There are many ways to play with requests in service worker. You can even queue your request to avoid rate limit problems. But I think an awesome way is use service worker as a middle layer server.</p>\n<h2 id=\"Use-service-worker-as-middle-layer-server\"><a href=\"#Use-service-worker-as-middle-layer-server\" class=\"headerlink\" title=\"Use service worker as middle layer server\"></a>Use service worker as middle layer server</h2><p>In server side, we may use Node.js server as middle layer to merge API requests and send formatted data to frontend. In server worker, we can also build a middle layer.</p>\n<p>To create a new API in service worker:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In service worker</span></span><br><span class=\"line\">importScripts(<span class=\"string\">'https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// will create a API `/newAPI`</span></span><br><span class=\"line\">workbox.routing.registerRoute(</span><br><span class=\"line\">  <span class=\"string\">'/newAPI'</span>,</span><br><span class=\"line\">  (&#123;url, event&#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> responseData = &#123;</span><br><span class=\"line\">      id: <span class=\"string\">'123'</span>,</span><br><span class=\"line\">      name: <span class=\"string\">'test'</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(</span><br><span class=\"line\">      <span class=\"built_in\">JSON</span>.stringify(responseData), &#123;</span><br><span class=\"line\">        headers: &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Use server worker as middle layer server:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// In service worker</span></span><br><span class=\"line\">importScripts(<span class=\"string\">'https://storage.googleapis.com/workbox-cdn/releases/3.6.1/workbox-sw.js'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// will create a API `/news.json`</span></span><br><span class=\"line\">workbox.routing.registerRoute(</span><br><span class=\"line\">  <span class=\"string\">'/news.json'</span>,</span><br><span class=\"line\">  <span class=\"keyword\">async</span> (&#123;url, event&#125;) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(url);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> idsResponse = <span class=\"keyword\">await</span> fetch(<span class=\"string\">'https://hacker-news.firebaseio.com/v0/topstories.json?orderBy=%22$key%22&amp;startAt=%220%22&amp;endAt=%225%22'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">const</span> idMaps = <span class=\"keyword\">await</span> idsResponse.json()</span><br><span class=\"line\">    <span class=\"keyword\">const</span> ids = <span class=\"built_in\">Object</span>.keys(idMaps).map(<span class=\"function\"><span class=\"params\">key</span> =&gt;</span> idMaps[key]);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> newsList = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">      ids.map(<span class=\"keyword\">async</span> (id) =&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">`https://hacker-news.firebaseio.com/v0/item/<span class=\"subst\">$&#123;id&#125;</span>.json`</span>)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> news = <span class=\"keyword\">await</span> response.json()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> news</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Response(</span><br><span class=\"line\">      <span class=\"built_in\">JSON</span>.stringify(newsList), &#123;</span><br><span class=\"line\">        headers: &#123; <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span> &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://developers.google.com/web/tools/workbox/\" target=\"_blank\" rel=\"noopener\">Workbox</a> is new tool from Google to help build progressive web apps.<br>For server-side notification, we can use <a href=\"https://developers.google.com/web/ilt/pwa/introduction-to-push-notifications\" target=\"_blank\" rel=\"noopener\">Push Notification</a> api to get notification from server-side in service worker. And use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage\" target=\"_blank\" rel=\"noopener\">Client.postMessage</a> to notify client app.</p>\n<h2 id=\"Other-framework-like-progressive-web-app\"><a href=\"#Other-framework-like-progressive-web-app\" class=\"headerlink\" title=\"Other framework like progressive web app\"></a>Other framework like progressive web app</h2><p>Now progressive web app works well in mobile browser, user can add app to their home screen to use it as a native app in Android and iOS. For some popular apps, they provide some framework to allow developer to embed their cross-platform app, such as WeChat’s Mini-Programs, Facebook’s instant games and Google’s instant apps. They are very similar with progressive web app. </p>\n<p>With those framework, users don’t need to install apps, just open it and use it. Those apps are becoming more and more popular, because they are easy to developer and cross-platform. If you are a client developer, you should pay more attention on them.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/1600/1*h_D5wqHdJjsDIVLkbDqLNQ.jpeg\" alt=\" \"></p>\n<p>For WeChat’s mini-program, it is built with JS and template like HTML. So it gets a lot of developers from Web developers, and grows very quickly. WeChat’s mini-program makes it easy to integrate third party service with WeChat.</p>\n<p>I think those frameworks are same idea  just with different technology. They are like web application with native enhancement. So it is same as Progressive Web Apps. But I think Progressive web apps are more common. It’s a real web app and easier to learn and use.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>Progressive web apps can give our apps great user experience. With progressive web app, we can speed up our web application. We can also use service worker as a server. There are some framework like PWA such as WeChat’s Mini-Programs, Facebook’s instant games and Google’s instant apps. They have been becoming more and more popular, we should also pay more attention at them.</p>\n<p>I have run RingCentral JS SDK in service worker, it works well with restful API request, except pubnub. Pubnub’s JS SDK doesn’t work in service worker because of its http library. We can try to update pubnub sdk codes or use Push notification of service woker.</p>\n"},{"layout":"post","title":"Explore a more complete front-end testing strategy","date":"2018-12-18T04:30:00.000Z","author":"Michael Lin","_content":"\n\n![test-strategy](/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/test-strategy.jpg)\n\n> The assumption in this article is that we are continuously developing a relatively large front-end project, and we have adopted a domain-driven design, as well as an object-oriented programming model. The front-end business logic is split into **`domain modules`**/**`UI components`**. So we may need to have a more complete testing strategy to assure such a front-end project.\n\n## General front-end testing\n\nWhether it's a traditional test model or a continuous delivery model, we typically define the following three types of tests:\n\n![generic-test](/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/generic-test.png)\n\n- E2E\n\nEnd-to-end testing involves ensuring that the integrated components of an application function as expected. The entire application is tested in a real-world scenario such as communicating with the database, network, hardware and other applications.\n\n- IT\n\nIntegration testing is a key software development life cycle strategy. Generally, small software systems are integrated and tested in a single phase, whereas larger systems involve several integration phases to build a complete system, such as integrating modules into low-level subsystems for integration with larger subsystems. Integration testing encompasses all aspects of a software system's performance, functionality and reliability.\n\n\n- UT\n\nUnit testing is a software testing method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures, are tested to determine whether they are fit for use.\n\n\n\n## What's wrong with the general front-end testing?\n\nWhen we are evaluating the integrity of a test strategy, we try to validate it with some of the following criteria:\n\n* Pass acceptance criteria\n* Catch bugs as early as possible\n* Faster running speed, especially at the top level of testing\n* Find bugs efficiently\n* Test writing costs and maintenance costs\n* Continuous refactoring risks\n\nI think a better test strategy should be as consistent as possible with the above items.\n\nIn the general testing strategy mentioned above, E2E can override more AC conditions, but usually it runs less frequently; IT is run more frequently than E2E, but IT often includes an integrated app in almost the entire system, which is often more bloated in this case, and UT typically accounts for a larger proportion of such this strategy, although the logical coverage is good, but in a large refactoring usually UT will also change, of course, most of these UT is not too much of a problem.\n\nFrom the point of view of catching bugs as early as possible, does that mean that the general testing strategy can be better improved? Because the E2E test is most likely to run once in a relatively long period of time, rather than every PR or even every code commit, because the e2e run is usually slow and unstable, it is the most expensive automated test to run.\n\nSometimes we have some integration tests that start a bloated integrated system, maybe it already includes a lot of mock, and you can keep running tests over and over again, but when there are more and more cases of integration testing, we can't even guarantee faster completion within each PR, and in a resource-constrained CI environment, it could be half an hour, or even longer.\n\nAs a system becomes more complex, we need a complete testing strategy to tell us what cases failed in these tests, and to enable us to catch bugs more efficiently through test reports. Whether it is network instability, back-end server APIs exceptions, front-end domain modules exceptions or UI components exceptions, and so on, we can quickly catch these bugs. Obviously, the general testing strategy can provide limited help in locating bugs. For example, UT has succeeded, IT has failed, and E2E has failed too. It is difficult for us to analyze clearer information from such test reports.\n\nThe cost of writing test code should be balanced with a continuous delivery development model. When the AC definition is clear, it's just that our test code should be able to align the information described by AC. In theory, if all AC is fully implemented by E2E, this will also enable the verification of AC. But obviously, this brings with it a highly unbalanced test instability and inefficient operation.\n\nIf the unit tests are adequate enough, will this ensure that our AC can be accepted and become viable? This should depend on the maintenance cost of the unit test, each time we refactor our code, we will have to modify the unit tests involved in these code as well, which means we need a higher level of test to ensure the quality and correctness of these code, despite their fast changing nature.\n\n## What's the key to solving the problem?\n\nAmong the issues we mentioned for some test strategies, based on our ATDD sustainable delivery development model, AC's assurance is clearly the most important, and a good test strategy should ensure that every refactoring is fully confident, while at the same time, there is a good balance between running speed, finding bugs, and maintaining the cost of test code. Among these additional elements, we very much do not recommend going in the extreme way, but rather a way of resembling the [Liebig's law][1] to make our test strategy more complete.\n\n## Propose a more complete testing strategy\n\n![new-test-strategy](/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/new-test-strategy.png)\n\n- E2E\n\nThe E2E here should implement the most important AC parts, and it is best to support smoke testing/UI testing/multi-browser compatibility testing.\n\n- IT3\n\nIT3 is an integrated test of the overall system based on the mock service, which can run E2E code, but it does not actually start a browser to test, and all tests run in Node.js. Because it's a mock for back-end server APIs and the browser's real DOM, so it's faster than E2E, and it keeps running over and over again. In particular, it is important to note that IT3 is a fully reusable E2E code, and IT is the general testing strategy mentioned above that is often not able to reuse E2E code.\n\n- IT2\n\nIT2 is an integrated test of the minimum set of UI and the minimum set of domain modules, and it is also based on the mock service (including server APIs/DOM/BOM), because it is the module that starts the minimum set, so its test run speed and the operational performance of the minimum set can be guaranteed, it is faster than IT3. At the same time, it IT3 and has a good partition, IT2 is responsible for the minimum set, and IT3 is responsible for the overall collection. In addition to the minimum set, writing IT2 and IT3 is not very different, it can satisfy the mapping relationship through AC. Of course, unless there is a problem with the non-dependent module at the bottom, it is actually easier for us to pass the IT2/IT3 test report to bugs's positioning.\n\n- IT1\n\nIT1 is just the minimum set of modules integration tests, it only requires the mock back-end server APIs, because it only starts the minimum set domain modules, so it is faster than IT2 run. One or more steps in AC are capable of being converted into IT2 tests. Through IT1/IT2/IT3 's test report, it is also easier to infer the location or cause of bugs.\n\n- UT\n\nIn IT2 talking about testing problems with the underlying modules (less dependent modules or non-dependent modules), we recommend that such modules be suitable for more complete UT, especially core functions, and that the core modules of other modules, or helper functions, can be considered for unit testing, and that in many cases, Can help AC cover more examples. It is an important addition to IT1/IT2/IT3.\n\n\n![it-cover](/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/it-cover.png)\n\nAmong the different test types, the test factors covered are also different. Then we hope that with such a test strategy can be more complete and efficient to meet the various factors of testing: The E2E test covers almost all of the test factors, IT3 is less than E2E real server APIs and real browsers, IT2 is less than T3 a number of non-essential modules and UI components, IT1 has fewer UI components than IT2, and UT only covers a small number of core logical parts.\n\nIn such a test strategy, we can develop a better strategy to run the test code, we can run ut/it1 when submitting commit, we can run PR when we submit the UT/IT1/IT2 or even IT3, And at the time of our return or when we run the E2E regularly (a week or a few days). In such a operating system, we can ensure that the AC is guaranteed to be verified, but also to ensure a certain degree of operational efficiency balance, while different types of test reports will also contribute to the positioning of the bugs.\n\n## How to implement building this more complete test\n\nExample for business code:\n\n```javascript\n\n@Module()\nclass Foo {\n    a() {}\n    _x() {\n        //No dependent module core logic\n    }\n}\n\n@Module({ dependences:['Foo'] })\nclass Bar() {\n    b() {}\n     _y() {\n        //No dependent module core logic\n    }\n    get name(){}\n}\n\n@Module({ dependences:['Foo', 'Bar'] })\nclass Foobar() {\n    c() {}\n    get name(){}\n}\n\nconst store = createStore(\n    //...factory module\n);\n\nconst FoobarContainer = (props) => (\n    <div onClick={props.foobar.c}>\n        {props.foobar.name}\n    </div>\n);\n\nconst BarContainer = (props) => (\n    <div onClick={props.bar.b}>\n        {props.bar.name}\n    </div>\n);\n\nclass App extends Component {\n    render() {\n        return (\n        <div>\n            {this.props.foobar ? (\n                <FoobarContainer {...this.props}>\n            ): null }\n            {this.props.bar ? (\n                <BarContainer {...this.props}>\n            ): null }\n        </div>\n        );\n    }\n}\n\nrender(\n    <App store={store} />,\n    mountNode\n);\n```\n\nExample for acceptance criteria\n\n```cucumber\nFeature: AC\n\n  Scenario Outline:\n    Given User saw 'b' node\n    When User click 'b'\n    Then User should see 'b' changed\n    When User click 'f'\n    Then User should see 'f' changed\n\n  Scenario Outline:\n    Given User saw 'c' node\n    When User click 'c'\n    Then User should see 'c' changed\n    When User click 'e'\n    Then User should see 'e' changed\n\n```\n\nExample for testing\n\n```javascript\n\n// E2E & IT3\ntest(() => {\n    const app = getApp();\n    app.find(nodeSelectorB).click();\n    expect(result).toBe(expectedValue1);\n    app.find(nodeSelectorF).click();\n    expect(result).toBe(expectedValue2);\n});\n\ntest(() => {\n    const app = getApp();\n    app.find(nodeSelectorC).click();\n    expect(result).toBe(expectedValue1);\n    app.find(nodeSelectorE).click();\n    expect(result).toBe(expectedValue2);\n});\n\n// IT2\ntest(() => {\n    const barContainer = getMinimalSet(BarContainer);\n    barContainer.find(nodeSelector).click();\n    expect(result).toBe(expectedValue2);\n});\n\ntest(() => {\n    const foobarContainer = getMinimalSet(FoobarContainer);\n    foobarContainer.find(nodeSelector).click();\n    expect(result).toBe(expectedValue1);\n});\n\n\n// IT1\ntest(() => {\n    const app = getMinimalSet(Bar);\n    app.b();\n    expect(result).toBe(expectedValue);\n});\n\ntest(() => {\n    const app = getMinimalSet(Foobar);\n    app.c();\n    expect(result).toBe(expectedValue);\n});\n\n// UT\ntest(() => {\n    const result = Foo.prototype._x();\n    expect(result).toBe(expectedValue);\n});\n\ntest(() => {\n    const result = Bar.prototype._y();\n    expect(result).toBe(expectedValue);\n});\n```\n\n## Conclusion\n\nThere are many factors we need to consider when developing a test strategy. From the point of view of correct verification based on AC, we should also consider the operation strategy, operating efficiency, writing and maintaining the cost of testing, bugs easy to find and refactoring assurance and other important factors, and should not go to extremes. In the case of ensuring a certain AC, we hope that this E2E/IT3/IT2/IT1/UT can be guaranteed in many ways to the quality of the code and the quality of the project engineering, while being agile enough for continuous delivery.\n\n\n\n[1]: https://en.wikipedia.org/wiki/Liebig%27s_law_of_the_minimum\n","source":"_posts/2018-12-18-blog-a-more-complete-front-end-testing-strategy.md","raw":"\n---\nlayout: post\ntitle:  \"Explore a more complete front-end testing strategy\"\ndate:   2018-12-18 12:30:00 +0800\ncategories: blog\nauthor: Michael Lin\n---\n\n\n![test-strategy](/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/test-strategy.jpg)\n\n> The assumption in this article is that we are continuously developing a relatively large front-end project, and we have adopted a domain-driven design, as well as an object-oriented programming model. The front-end business logic is split into **`domain modules`**/**`UI components`**. So we may need to have a more complete testing strategy to assure such a front-end project.\n\n## General front-end testing\n\nWhether it's a traditional test model or a continuous delivery model, we typically define the following three types of tests:\n\n![generic-test](/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/generic-test.png)\n\n- E2E\n\nEnd-to-end testing involves ensuring that the integrated components of an application function as expected. The entire application is tested in a real-world scenario such as communicating with the database, network, hardware and other applications.\n\n- IT\n\nIntegration testing is a key software development life cycle strategy. Generally, small software systems are integrated and tested in a single phase, whereas larger systems involve several integration phases to build a complete system, such as integrating modules into low-level subsystems for integration with larger subsystems. Integration testing encompasses all aspects of a software system's performance, functionality and reliability.\n\n\n- UT\n\nUnit testing is a software testing method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures, are tested to determine whether they are fit for use.\n\n\n\n## What's wrong with the general front-end testing?\n\nWhen we are evaluating the integrity of a test strategy, we try to validate it with some of the following criteria:\n\n* Pass acceptance criteria\n* Catch bugs as early as possible\n* Faster running speed, especially at the top level of testing\n* Find bugs efficiently\n* Test writing costs and maintenance costs\n* Continuous refactoring risks\n\nI think a better test strategy should be as consistent as possible with the above items.\n\nIn the general testing strategy mentioned above, E2E can override more AC conditions, but usually it runs less frequently; IT is run more frequently than E2E, but IT often includes an integrated app in almost the entire system, which is often more bloated in this case, and UT typically accounts for a larger proportion of such this strategy, although the logical coverage is good, but in a large refactoring usually UT will also change, of course, most of these UT is not too much of a problem.\n\nFrom the point of view of catching bugs as early as possible, does that mean that the general testing strategy can be better improved? Because the E2E test is most likely to run once in a relatively long period of time, rather than every PR or even every code commit, because the e2e run is usually slow and unstable, it is the most expensive automated test to run.\n\nSometimes we have some integration tests that start a bloated integrated system, maybe it already includes a lot of mock, and you can keep running tests over and over again, but when there are more and more cases of integration testing, we can't even guarantee faster completion within each PR, and in a resource-constrained CI environment, it could be half an hour, or even longer.\n\nAs a system becomes more complex, we need a complete testing strategy to tell us what cases failed in these tests, and to enable us to catch bugs more efficiently through test reports. Whether it is network instability, back-end server APIs exceptions, front-end domain modules exceptions or UI components exceptions, and so on, we can quickly catch these bugs. Obviously, the general testing strategy can provide limited help in locating bugs. For example, UT has succeeded, IT has failed, and E2E has failed too. It is difficult for us to analyze clearer information from such test reports.\n\nThe cost of writing test code should be balanced with a continuous delivery development model. When the AC definition is clear, it's just that our test code should be able to align the information described by AC. In theory, if all AC is fully implemented by E2E, this will also enable the verification of AC. But obviously, this brings with it a highly unbalanced test instability and inefficient operation.\n\nIf the unit tests are adequate enough, will this ensure that our AC can be accepted and become viable? This should depend on the maintenance cost of the unit test, each time we refactor our code, we will have to modify the unit tests involved in these code as well, which means we need a higher level of test to ensure the quality and correctness of these code, despite their fast changing nature.\n\n## What's the key to solving the problem?\n\nAmong the issues we mentioned for some test strategies, based on our ATDD sustainable delivery development model, AC's assurance is clearly the most important, and a good test strategy should ensure that every refactoring is fully confident, while at the same time, there is a good balance between running speed, finding bugs, and maintaining the cost of test code. Among these additional elements, we very much do not recommend going in the extreme way, but rather a way of resembling the [Liebig's law][1] to make our test strategy more complete.\n\n## Propose a more complete testing strategy\n\n![new-test-strategy](/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/new-test-strategy.png)\n\n- E2E\n\nThe E2E here should implement the most important AC parts, and it is best to support smoke testing/UI testing/multi-browser compatibility testing.\n\n- IT3\n\nIT3 is an integrated test of the overall system based on the mock service, which can run E2E code, but it does not actually start a browser to test, and all tests run in Node.js. Because it's a mock for back-end server APIs and the browser's real DOM, so it's faster than E2E, and it keeps running over and over again. In particular, it is important to note that IT3 is a fully reusable E2E code, and IT is the general testing strategy mentioned above that is often not able to reuse E2E code.\n\n- IT2\n\nIT2 is an integrated test of the minimum set of UI and the minimum set of domain modules, and it is also based on the mock service (including server APIs/DOM/BOM), because it is the module that starts the minimum set, so its test run speed and the operational performance of the minimum set can be guaranteed, it is faster than IT3. At the same time, it IT3 and has a good partition, IT2 is responsible for the minimum set, and IT3 is responsible for the overall collection. In addition to the minimum set, writing IT2 and IT3 is not very different, it can satisfy the mapping relationship through AC. Of course, unless there is a problem with the non-dependent module at the bottom, it is actually easier for us to pass the IT2/IT3 test report to bugs's positioning.\n\n- IT1\n\nIT1 is just the minimum set of modules integration tests, it only requires the mock back-end server APIs, because it only starts the minimum set domain modules, so it is faster than IT2 run. One or more steps in AC are capable of being converted into IT2 tests. Through IT1/IT2/IT3 's test report, it is also easier to infer the location or cause of bugs.\n\n- UT\n\nIn IT2 talking about testing problems with the underlying modules (less dependent modules or non-dependent modules), we recommend that such modules be suitable for more complete UT, especially core functions, and that the core modules of other modules, or helper functions, can be considered for unit testing, and that in many cases, Can help AC cover more examples. It is an important addition to IT1/IT2/IT3.\n\n\n![it-cover](/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/it-cover.png)\n\nAmong the different test types, the test factors covered are also different. Then we hope that with such a test strategy can be more complete and efficient to meet the various factors of testing: The E2E test covers almost all of the test factors, IT3 is less than E2E real server APIs and real browsers, IT2 is less than T3 a number of non-essential modules and UI components, IT1 has fewer UI components than IT2, and UT only covers a small number of core logical parts.\n\nIn such a test strategy, we can develop a better strategy to run the test code, we can run ut/it1 when submitting commit, we can run PR when we submit the UT/IT1/IT2 or even IT3, And at the time of our return or when we run the E2E regularly (a week or a few days). In such a operating system, we can ensure that the AC is guaranteed to be verified, but also to ensure a certain degree of operational efficiency balance, while different types of test reports will also contribute to the positioning of the bugs.\n\n## How to implement building this more complete test\n\nExample for business code:\n\n```javascript\n\n@Module()\nclass Foo {\n    a() {}\n    _x() {\n        //No dependent module core logic\n    }\n}\n\n@Module({ dependences:['Foo'] })\nclass Bar() {\n    b() {}\n     _y() {\n        //No dependent module core logic\n    }\n    get name(){}\n}\n\n@Module({ dependences:['Foo', 'Bar'] })\nclass Foobar() {\n    c() {}\n    get name(){}\n}\n\nconst store = createStore(\n    //...factory module\n);\n\nconst FoobarContainer = (props) => (\n    <div onClick={props.foobar.c}>\n        {props.foobar.name}\n    </div>\n);\n\nconst BarContainer = (props) => (\n    <div onClick={props.bar.b}>\n        {props.bar.name}\n    </div>\n);\n\nclass App extends Component {\n    render() {\n        return (\n        <div>\n            {this.props.foobar ? (\n                <FoobarContainer {...this.props}>\n            ): null }\n            {this.props.bar ? (\n                <BarContainer {...this.props}>\n            ): null }\n        </div>\n        );\n    }\n}\n\nrender(\n    <App store={store} />,\n    mountNode\n);\n```\n\nExample for acceptance criteria\n\n```cucumber\nFeature: AC\n\n  Scenario Outline:\n    Given User saw 'b' node\n    When User click 'b'\n    Then User should see 'b' changed\n    When User click 'f'\n    Then User should see 'f' changed\n\n  Scenario Outline:\n    Given User saw 'c' node\n    When User click 'c'\n    Then User should see 'c' changed\n    When User click 'e'\n    Then User should see 'e' changed\n\n```\n\nExample for testing\n\n```javascript\n\n// E2E & IT3\ntest(() => {\n    const app = getApp();\n    app.find(nodeSelectorB).click();\n    expect(result).toBe(expectedValue1);\n    app.find(nodeSelectorF).click();\n    expect(result).toBe(expectedValue2);\n});\n\ntest(() => {\n    const app = getApp();\n    app.find(nodeSelectorC).click();\n    expect(result).toBe(expectedValue1);\n    app.find(nodeSelectorE).click();\n    expect(result).toBe(expectedValue2);\n});\n\n// IT2\ntest(() => {\n    const barContainer = getMinimalSet(BarContainer);\n    barContainer.find(nodeSelector).click();\n    expect(result).toBe(expectedValue2);\n});\n\ntest(() => {\n    const foobarContainer = getMinimalSet(FoobarContainer);\n    foobarContainer.find(nodeSelector).click();\n    expect(result).toBe(expectedValue1);\n});\n\n\n// IT1\ntest(() => {\n    const app = getMinimalSet(Bar);\n    app.b();\n    expect(result).toBe(expectedValue);\n});\n\ntest(() => {\n    const app = getMinimalSet(Foobar);\n    app.c();\n    expect(result).toBe(expectedValue);\n});\n\n// UT\ntest(() => {\n    const result = Foo.prototype._x();\n    expect(result).toBe(expectedValue);\n});\n\ntest(() => {\n    const result = Bar.prototype._y();\n    expect(result).toBe(expectedValue);\n});\n```\n\n## Conclusion\n\nThere are many factors we need to consider when developing a test strategy. From the point of view of correct verification based on AC, we should also consider the operation strategy, operating efficiency, writing and maintaining the cost of testing, bugs easy to find and refactoring assurance and other important factors, and should not go to extremes. In the case of ensuring a certain AC, we hope that this E2E/IT3/IT2/IT1/UT can be guaranteed in many ways to the quality of the code and the quality of the project engineering, while being agile enough for continuous delivery.\n\n\n\n[1]: https://en.wikipedia.org/wiki/Liebig%27s_law_of_the_minimum\n","slug":"2018-12-18-blog-a-more-complete-front-end-testing-strategy","published":1,"updated":"2018-12-26T03:28:06.254Z","comments":1,"photos":[],"link":"","_id":"cjq4mdveq0008tci58ow32iia","content":"<p><img src=\"/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/test-strategy.jpg\" alt=\"test-strategy\"></p>\n<blockquote>\n<p>The assumption in this article is that we are continuously developing a relatively large front-end project, and we have adopted a domain-driven design, as well as an object-oriented programming model. The front-end business logic is split into <strong><code>domain modules</code></strong>/<strong><code>UI components</code></strong>. So we may need to have a more complete testing strategy to assure such a front-end project.</p>\n</blockquote>\n<h2 id=\"General-front-end-testing\"><a href=\"#General-front-end-testing\" class=\"headerlink\" title=\"General front-end testing\"></a>General front-end testing</h2><p>Whether it’s a traditional test model or a continuous delivery model, we typically define the following three types of tests:</p>\n<p><img src=\"/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/generic-test.png\" alt=\"generic-test\"></p>\n<ul>\n<li>E2E</li>\n</ul>\n<p>End-to-end testing involves ensuring that the integrated components of an application function as expected. The entire application is tested in a real-world scenario such as communicating with the database, network, hardware and other applications.</p>\n<ul>\n<li>IT</li>\n</ul>\n<p>Integration testing is a key software development life cycle strategy. Generally, small software systems are integrated and tested in a single phase, whereas larger systems involve several integration phases to build a complete system, such as integrating modules into low-level subsystems for integration with larger subsystems. Integration testing encompasses all aspects of a software system’s performance, functionality and reliability.</p>\n<ul>\n<li>UT</li>\n</ul>\n<p>Unit testing is a software testing method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures, are tested to determine whether they are fit for use.</p>\n<h2 id=\"What’s-wrong-with-the-general-front-end-testing\"><a href=\"#What’s-wrong-with-the-general-front-end-testing\" class=\"headerlink\" title=\"What’s wrong with the general front-end testing?\"></a>What’s wrong with the general front-end testing?</h2><p>When we are evaluating the integrity of a test strategy, we try to validate it with some of the following criteria:</p>\n<ul>\n<li>Pass acceptance criteria</li>\n<li>Catch bugs as early as possible</li>\n<li>Faster running speed, especially at the top level of testing</li>\n<li>Find bugs efficiently</li>\n<li>Test writing costs and maintenance costs</li>\n<li>Continuous refactoring risks</li>\n</ul>\n<p>I think a better test strategy should be as consistent as possible with the above items.</p>\n<p>In the general testing strategy mentioned above, E2E can override more AC conditions, but usually it runs less frequently; IT is run more frequently than E2E, but IT often includes an integrated app in almost the entire system, which is often more bloated in this case, and UT typically accounts for a larger proportion of such this strategy, although the logical coverage is good, but in a large refactoring usually UT will also change, of course, most of these UT is not too much of a problem.</p>\n<p>From the point of view of catching bugs as early as possible, does that mean that the general testing strategy can be better improved? Because the E2E test is most likely to run once in a relatively long period of time, rather than every PR or even every code commit, because the e2e run is usually slow and unstable, it is the most expensive automated test to run.</p>\n<p>Sometimes we have some integration tests that start a bloated integrated system, maybe it already includes a lot of mock, and you can keep running tests over and over again, but when there are more and more cases of integration testing, we can’t even guarantee faster completion within each PR, and in a resource-constrained CI environment, it could be half an hour, or even longer.</p>\n<p>As a system becomes more complex, we need a complete testing strategy to tell us what cases failed in these tests, and to enable us to catch bugs more efficiently through test reports. Whether it is network instability, back-end server APIs exceptions, front-end domain modules exceptions or UI components exceptions, and so on, we can quickly catch these bugs. Obviously, the general testing strategy can provide limited help in locating bugs. For example, UT has succeeded, IT has failed, and E2E has failed too. It is difficult for us to analyze clearer information from such test reports.</p>\n<p>The cost of writing test code should be balanced with a continuous delivery development model. When the AC definition is clear, it’s just that our test code should be able to align the information described by AC. In theory, if all AC is fully implemented by E2E, this will also enable the verification of AC. But obviously, this brings with it a highly unbalanced test instability and inefficient operation.</p>\n<p>If the unit tests are adequate enough, will this ensure that our AC can be accepted and become viable? This should depend on the maintenance cost of the unit test, each time we refactor our code, we will have to modify the unit tests involved in these code as well, which means we need a higher level of test to ensure the quality and correctness of these code, despite their fast changing nature.</p>\n<h2 id=\"What’s-the-key-to-solving-the-problem\"><a href=\"#What’s-the-key-to-solving-the-problem\" class=\"headerlink\" title=\"What’s the key to solving the problem?\"></a>What’s the key to solving the problem?</h2><p>Among the issues we mentioned for some test strategies, based on our ATDD sustainable delivery development model, AC’s assurance is clearly the most important, and a good test strategy should ensure that every refactoring is fully confident, while at the same time, there is a good balance between running speed, finding bugs, and maintaining the cost of test code. Among these additional elements, we very much do not recommend going in the extreme way, but rather a way of resembling the <a href=\"https://en.wikipedia.org/wiki/Liebig%27s_law_of_the_minimum\" target=\"_blank\" rel=\"noopener\">Liebig’s law</a> to make our test strategy more complete.</p>\n<h2 id=\"Propose-a-more-complete-testing-strategy\"><a href=\"#Propose-a-more-complete-testing-strategy\" class=\"headerlink\" title=\"Propose a more complete testing strategy\"></a>Propose a more complete testing strategy</h2><p><img src=\"/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/new-test-strategy.png\" alt=\"new-test-strategy\"></p>\n<ul>\n<li>E2E</li>\n</ul>\n<p>The E2E here should implement the most important AC parts, and it is best to support smoke testing/UI testing/multi-browser compatibility testing.</p>\n<ul>\n<li>IT3</li>\n</ul>\n<p>IT3 is an integrated test of the overall system based on the mock service, which can run E2E code, but it does not actually start a browser to test, and all tests run in Node.js. Because it’s a mock for back-end server APIs and the browser’s real DOM, so it’s faster than E2E, and it keeps running over and over again. In particular, it is important to note that IT3 is a fully reusable E2E code, and IT is the general testing strategy mentioned above that is often not able to reuse E2E code.</p>\n<ul>\n<li>IT2</li>\n</ul>\n<p>IT2 is an integrated test of the minimum set of UI and the minimum set of domain modules, and it is also based on the mock service (including server APIs/DOM/BOM), because it is the module that starts the minimum set, so its test run speed and the operational performance of the minimum set can be guaranteed, it is faster than IT3. At the same time, it IT3 and has a good partition, IT2 is responsible for the minimum set, and IT3 is responsible for the overall collection. In addition to the minimum set, writing IT2 and IT3 is not very different, it can satisfy the mapping relationship through AC. Of course, unless there is a problem with the non-dependent module at the bottom, it is actually easier for us to pass the IT2/IT3 test report to bugs’s positioning.</p>\n<ul>\n<li>IT1</li>\n</ul>\n<p>IT1 is just the minimum set of modules integration tests, it only requires the mock back-end server APIs, because it only starts the minimum set domain modules, so it is faster than IT2 run. One or more steps in AC are capable of being converted into IT2 tests. Through IT1/IT2/IT3 ‘s test report, it is also easier to infer the location or cause of bugs.</p>\n<ul>\n<li>UT</li>\n</ul>\n<p>In IT2 talking about testing problems with the underlying modules (less dependent modules or non-dependent modules), we recommend that such modules be suitable for more complete UT, especially core functions, and that the core modules of other modules, or helper functions, can be considered for unit testing, and that in many cases, Can help AC cover more examples. It is an important addition to IT1/IT2/IT3.</p>\n<p><img src=\"/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/it-cover.png\" alt=\"it-cover\"></p>\n<p>Among the different test types, the test factors covered are also different. Then we hope that with such a test strategy can be more complete and efficient to meet the various factors of testing: The E2E test covers almost all of the test factors, IT3 is less than E2E real server APIs and real browsers, IT2 is less than T3 a number of non-essential modules and UI components, IT1 has fewer UI components than IT2, and UT only covers a small number of core logical parts.</p>\n<p>In such a test strategy, we can develop a better strategy to run the test code, we can run ut/it1 when submitting commit, we can run PR when we submit the UT/IT1/IT2 or even IT3, And at the time of our return or when we run the E2E regularly (a week or a few days). In such a operating system, we can ensure that the AC is guaranteed to be verified, but also to ensure a certain degree of operational efficiency balance, while different types of test reports will also contribute to the positioning of the bugs.</p>\n<h2 id=\"How-to-implement-building-this-more-complete-test\"><a href=\"#How-to-implement-building-this-more-complete-test\" class=\"headerlink\" title=\"How to implement building this more complete test\"></a>How to implement building this more complete test</h2><p>Example for business code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Module()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    a() &#123;&#125;</span><br><span class=\"line\">    _x() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//No dependent module core logic</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Module(&#123; <span class=\"attr\">dependences</span>:[<span class=\"string\">'Foo'</span>] &#125;)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span>() </span>&#123;</span><br><span class=\"line\">    b() &#123;&#125;</span><br><span class=\"line\">     _y() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//No dependent module core logic</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    get name()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Module(&#123; <span class=\"attr\">dependences</span>:[<span class=\"string\">'Foo'</span>, <span class=\"string\">'Bar'</span>] &#125;)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foobar</span>() </span>&#123;</span><br><span class=\"line\">    c() &#123;&#125;</span><br><span class=\"line\">    get name()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(</span><br><span class=\"line\">    <span class=\"comment\">//...factory module</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> FoobarContainer = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> (</span><br><span class=\"line\">    &lt;div onClick=&#123;props.foobar.c&#125;&gt;</span><br><span class=\"line\">        &#123;props.foobar.name&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const BarContainer = (props) =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div onClick=&#123;props.bar.b&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;props.bar.name&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &#123;<span class=\"keyword\">this</span>.props.foobar ? (</span><br><span class=\"line\">                &lt;FoobarContainer &#123;...this.props&#125;&gt;</span><br><span class=\"line\">            ): <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">            &#123;<span class=\"keyword\">this</span>.props.bar ? (</span><br><span class=\"line\">                &lt;BarContainer &#123;...this.props&#125;&gt;</span><br><span class=\"line\">            ): <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        );</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">render(</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;App store=&#123;store&#125; /</span>&gt;,</span><br><span class=\"line\">    mountNode</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Example for acceptance criteria</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Feature: AC</span><br><span class=\"line\"></span><br><span class=\"line\">  Scenario Outline:</span><br><span class=\"line\">    Given User saw &apos;b&apos; node</span><br><span class=\"line\">    When User click &apos;b&apos;</span><br><span class=\"line\">    Then User should see &apos;b&apos; changed</span><br><span class=\"line\">    When User click &apos;f&apos;</span><br><span class=\"line\">    Then User should see &apos;f&apos; changed</span><br><span class=\"line\"></span><br><span class=\"line\">  Scenario Outline:</span><br><span class=\"line\">    Given User saw &apos;c&apos; node</span><br><span class=\"line\">    When User click &apos;c&apos;</span><br><span class=\"line\">    Then User should see &apos;c&apos; changed</span><br><span class=\"line\">    When User click &apos;e&apos;</span><br><span class=\"line\">    Then User should see &apos;e&apos; changed</span><br></pre></td></tr></table></figure>\n<p>Example for testing</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// E2E &amp; IT3</span></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = getApp();</span><br><span class=\"line\">    app.find(nodeSelectorB).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue1);</span><br><span class=\"line\">    app.find(nodeSelectorF).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue2);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = getApp();</span><br><span class=\"line\">    app.find(nodeSelectorC).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue1);</span><br><span class=\"line\">    app.find(nodeSelectorE).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue2);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IT2</span></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> barContainer = getMinimalSet(BarContainer);</span><br><span class=\"line\">    barContainer.find(nodeSelector).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue2);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> foobarContainer = getMinimalSet(FoobarContainer);</span><br><span class=\"line\">    foobarContainer.find(nodeSelector).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue1);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IT1</span></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = getMinimalSet(Bar);</span><br><span class=\"line\">    app.b();</span><br><span class=\"line\">    expect(result).toBe(expectedValue);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = getMinimalSet(Foobar);</span><br><span class=\"line\">    app.c();</span><br><span class=\"line\">    expect(result).toBe(expectedValue);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// UT</span></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = Foo.prototype._x();</span><br><span class=\"line\">    expect(result).toBe(expectedValue);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = Bar.prototype._y();</span><br><span class=\"line\">    expect(result).toBe(expectedValue);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>There are many factors we need to consider when developing a test strategy. From the point of view of correct verification based on AC, we should also consider the operation strategy, operating efficiency, writing and maintaining the cost of testing, bugs easy to find and refactoring assurance and other important factors, and should not go to extremes. In the case of ensuring a certain AC, we hope that this E2E/IT3/IT2/IT1/UT can be guaranteed in many ways to the quality of the code and the quality of the project engineering, while being agile enough for continuous delivery.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/test-strategy.jpg\" alt=\"test-strategy\"></p>\n<blockquote>\n<p>The assumption in this article is that we are continuously developing a relatively large front-end project, and we have adopted a domain-driven design, as well as an object-oriented programming model. The front-end business logic is split into <strong><code>domain modules</code></strong>/<strong><code>UI components</code></strong>. So we may need to have a more complete testing strategy to assure such a front-end project.</p>\n</blockquote>\n<h2 id=\"General-front-end-testing\"><a href=\"#General-front-end-testing\" class=\"headerlink\" title=\"General front-end testing\"></a>General front-end testing</h2><p>Whether it’s a traditional test model or a continuous delivery model, we typically define the following three types of tests:</p>\n<p><img src=\"/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/generic-test.png\" alt=\"generic-test\"></p>\n<ul>\n<li>E2E</li>\n</ul>\n<p>End-to-end testing involves ensuring that the integrated components of an application function as expected. The entire application is tested in a real-world scenario such as communicating with the database, network, hardware and other applications.</p>\n<ul>\n<li>IT</li>\n</ul>\n<p>Integration testing is a key software development life cycle strategy. Generally, small software systems are integrated and tested in a single phase, whereas larger systems involve several integration phases to build a complete system, such as integrating modules into low-level subsystems for integration with larger subsystems. Integration testing encompasses all aspects of a software system’s performance, functionality and reliability.</p>\n<ul>\n<li>UT</li>\n</ul>\n<p>Unit testing is a software testing method by which individual units of source code, sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures, are tested to determine whether they are fit for use.</p>\n<h2 id=\"What’s-wrong-with-the-general-front-end-testing\"><a href=\"#What’s-wrong-with-the-general-front-end-testing\" class=\"headerlink\" title=\"What’s wrong with the general front-end testing?\"></a>What’s wrong with the general front-end testing?</h2><p>When we are evaluating the integrity of a test strategy, we try to validate it with some of the following criteria:</p>\n<ul>\n<li>Pass acceptance criteria</li>\n<li>Catch bugs as early as possible</li>\n<li>Faster running speed, especially at the top level of testing</li>\n<li>Find bugs efficiently</li>\n<li>Test writing costs and maintenance costs</li>\n<li>Continuous refactoring risks</li>\n</ul>\n<p>I think a better test strategy should be as consistent as possible with the above items.</p>\n<p>In the general testing strategy mentioned above, E2E can override more AC conditions, but usually it runs less frequently; IT is run more frequently than E2E, but IT often includes an integrated app in almost the entire system, which is often more bloated in this case, and UT typically accounts for a larger proportion of such this strategy, although the logical coverage is good, but in a large refactoring usually UT will also change, of course, most of these UT is not too much of a problem.</p>\n<p>From the point of view of catching bugs as early as possible, does that mean that the general testing strategy can be better improved? Because the E2E test is most likely to run once in a relatively long period of time, rather than every PR or even every code commit, because the e2e run is usually slow and unstable, it is the most expensive automated test to run.</p>\n<p>Sometimes we have some integration tests that start a bloated integrated system, maybe it already includes a lot of mock, and you can keep running tests over and over again, but when there are more and more cases of integration testing, we can’t even guarantee faster completion within each PR, and in a resource-constrained CI environment, it could be half an hour, or even longer.</p>\n<p>As a system becomes more complex, we need a complete testing strategy to tell us what cases failed in these tests, and to enable us to catch bugs more efficiently through test reports. Whether it is network instability, back-end server APIs exceptions, front-end domain modules exceptions or UI components exceptions, and so on, we can quickly catch these bugs. Obviously, the general testing strategy can provide limited help in locating bugs. For example, UT has succeeded, IT has failed, and E2E has failed too. It is difficult for us to analyze clearer information from such test reports.</p>\n<p>The cost of writing test code should be balanced with a continuous delivery development model. When the AC definition is clear, it’s just that our test code should be able to align the information described by AC. In theory, if all AC is fully implemented by E2E, this will also enable the verification of AC. But obviously, this brings with it a highly unbalanced test instability and inefficient operation.</p>\n<p>If the unit tests are adequate enough, will this ensure that our AC can be accepted and become viable? This should depend on the maintenance cost of the unit test, each time we refactor our code, we will have to modify the unit tests involved in these code as well, which means we need a higher level of test to ensure the quality and correctness of these code, despite their fast changing nature.</p>\n<h2 id=\"What’s-the-key-to-solving-the-problem\"><a href=\"#What’s-the-key-to-solving-the-problem\" class=\"headerlink\" title=\"What’s the key to solving the problem?\"></a>What’s the key to solving the problem?</h2><p>Among the issues we mentioned for some test strategies, based on our ATDD sustainable delivery development model, AC’s assurance is clearly the most important, and a good test strategy should ensure that every refactoring is fully confident, while at the same time, there is a good balance between running speed, finding bugs, and maintaining the cost of test code. Among these additional elements, we very much do not recommend going in the extreme way, but rather a way of resembling the <a href=\"https://en.wikipedia.org/wiki/Liebig%27s_law_of_the_minimum\" target=\"_blank\" rel=\"noopener\">Liebig’s law</a> to make our test strategy more complete.</p>\n<h2 id=\"Propose-a-more-complete-testing-strategy\"><a href=\"#Propose-a-more-complete-testing-strategy\" class=\"headerlink\" title=\"Propose a more complete testing strategy\"></a>Propose a more complete testing strategy</h2><p><img src=\"/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/new-test-strategy.png\" alt=\"new-test-strategy\"></p>\n<ul>\n<li>E2E</li>\n</ul>\n<p>The E2E here should implement the most important AC parts, and it is best to support smoke testing/UI testing/multi-browser compatibility testing.</p>\n<ul>\n<li>IT3</li>\n</ul>\n<p>IT3 is an integrated test of the overall system based on the mock service, which can run E2E code, but it does not actually start a browser to test, and all tests run in Node.js. Because it’s a mock for back-end server APIs and the browser’s real DOM, so it’s faster than E2E, and it keeps running over and over again. In particular, it is important to note that IT3 is a fully reusable E2E code, and IT is the general testing strategy mentioned above that is often not able to reuse E2E code.</p>\n<ul>\n<li>IT2</li>\n</ul>\n<p>IT2 is an integrated test of the minimum set of UI and the minimum set of domain modules, and it is also based on the mock service (including server APIs/DOM/BOM), because it is the module that starts the minimum set, so its test run speed and the operational performance of the minimum set can be guaranteed, it is faster than IT3. At the same time, it IT3 and has a good partition, IT2 is responsible for the minimum set, and IT3 is responsible for the overall collection. In addition to the minimum set, writing IT2 and IT3 is not very different, it can satisfy the mapping relationship through AC. Of course, unless there is a problem with the non-dependent module at the bottom, it is actually easier for us to pass the IT2/IT3 test report to bugs’s positioning.</p>\n<ul>\n<li>IT1</li>\n</ul>\n<p>IT1 is just the minimum set of modules integration tests, it only requires the mock back-end server APIs, because it only starts the minimum set domain modules, so it is faster than IT2 run. One or more steps in AC are capable of being converted into IT2 tests. Through IT1/IT2/IT3 ‘s test report, it is also easier to infer the location or cause of bugs.</p>\n<ul>\n<li>UT</li>\n</ul>\n<p>In IT2 talking about testing problems with the underlying modules (less dependent modules or non-dependent modules), we recommend that such modules be suitable for more complete UT, especially core functions, and that the core modules of other modules, or helper functions, can be considered for unit testing, and that in many cases, Can help AC cover more examples. It is an important addition to IT1/IT2/IT3.</p>\n<p><img src=\"/integration-blog/assets/2018-12-18-blog-a-more-complete-front-end-testing-strategy/it-cover.png\" alt=\"it-cover\"></p>\n<p>Among the different test types, the test factors covered are also different. Then we hope that with such a test strategy can be more complete and efficient to meet the various factors of testing: The E2E test covers almost all of the test factors, IT3 is less than E2E real server APIs and real browsers, IT2 is less than T3 a number of non-essential modules and UI components, IT1 has fewer UI components than IT2, and UT only covers a small number of core logical parts.</p>\n<p>In such a test strategy, we can develop a better strategy to run the test code, we can run ut/it1 when submitting commit, we can run PR when we submit the UT/IT1/IT2 or even IT3, And at the time of our return or when we run the E2E regularly (a week or a few days). In such a operating system, we can ensure that the AC is guaranteed to be verified, but also to ensure a certain degree of operational efficiency balance, while different types of test reports will also contribute to the positioning of the bugs.</p>\n<h2 id=\"How-to-implement-building-this-more-complete-test\"><a href=\"#How-to-implement-building-this-more-complete-test\" class=\"headerlink\" title=\"How to implement building this more complete test\"></a>How to implement building this more complete test</h2><p>Example for business code:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">@Module()</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    a() &#123;&#125;</span><br><span class=\"line\">    _x() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//No dependent module core logic</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Module(&#123; <span class=\"attr\">dependences</span>:[<span class=\"string\">'Foo'</span>] &#125;)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span>() </span>&#123;</span><br><span class=\"line\">    b() &#123;&#125;</span><br><span class=\"line\">     _y() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//No dependent module core logic</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    get name()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Module(&#123; <span class=\"attr\">dependences</span>:[<span class=\"string\">'Foo'</span>, <span class=\"string\">'Bar'</span>] &#125;)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foobar</span>() </span>&#123;</span><br><span class=\"line\">    c() &#123;&#125;</span><br><span class=\"line\">    get name()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = createStore(</span><br><span class=\"line\">    <span class=\"comment\">//...factory module</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> FoobarContainer = <span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> (</span><br><span class=\"line\">    &lt;div onClick=&#123;props.foobar.c&#125;&gt;</span><br><span class=\"line\">        &#123;props.foobar.name&#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">);</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const BarContainer = (props) =&gt; (</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;div onClick=&#123;props.bar.b&#125;&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        &#123;props.bar.name&#125;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        &lt;div&gt;</span><br><span class=\"line\">            &#123;<span class=\"keyword\">this</span>.props.foobar ? (</span><br><span class=\"line\">                &lt;FoobarContainer &#123;...this.props&#125;&gt;</span><br><span class=\"line\">            ): <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">            &#123;<span class=\"keyword\">this</span>.props.bar ? (</span><br><span class=\"line\">                &lt;BarContainer &#123;...this.props&#125;&gt;</span><br><span class=\"line\">            ): <span class=\"literal\">null</span> &#125;</span><br><span class=\"line\">        &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">        );</span></span><br><span class=\"line\"><span class=\"regexp\">    &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">render(</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;App store=&#123;store&#125; /</span>&gt;,</span><br><span class=\"line\">    mountNode</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<p>Example for acceptance criteria</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Feature: AC</span><br><span class=\"line\"></span><br><span class=\"line\">  Scenario Outline:</span><br><span class=\"line\">    Given User saw &apos;b&apos; node</span><br><span class=\"line\">    When User click &apos;b&apos;</span><br><span class=\"line\">    Then User should see &apos;b&apos; changed</span><br><span class=\"line\">    When User click &apos;f&apos;</span><br><span class=\"line\">    Then User should see &apos;f&apos; changed</span><br><span class=\"line\"></span><br><span class=\"line\">  Scenario Outline:</span><br><span class=\"line\">    Given User saw &apos;c&apos; node</span><br><span class=\"line\">    When User click &apos;c&apos;</span><br><span class=\"line\">    Then User should see &apos;c&apos; changed</span><br><span class=\"line\">    When User click &apos;e&apos;</span><br><span class=\"line\">    Then User should see &apos;e&apos; changed</span><br></pre></td></tr></table></figure>\n<p>Example for testing</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// E2E &amp; IT3</span></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = getApp();</span><br><span class=\"line\">    app.find(nodeSelectorB).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue1);</span><br><span class=\"line\">    app.find(nodeSelectorF).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue2);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = getApp();</span><br><span class=\"line\">    app.find(nodeSelectorC).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue1);</span><br><span class=\"line\">    app.find(nodeSelectorE).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue2);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IT2</span></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> barContainer = getMinimalSet(BarContainer);</span><br><span class=\"line\">    barContainer.find(nodeSelector).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue2);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> foobarContainer = getMinimalSet(FoobarContainer);</span><br><span class=\"line\">    foobarContainer.find(nodeSelector).click();</span><br><span class=\"line\">    expect(result).toBe(expectedValue1);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IT1</span></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = getMinimalSet(Bar);</span><br><span class=\"line\">    app.b();</span><br><span class=\"line\">    expect(result).toBe(expectedValue);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> app = getMinimalSet(Foobar);</span><br><span class=\"line\">    app.c();</span><br><span class=\"line\">    expect(result).toBe(expectedValue);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// UT</span></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = Foo.prototype._x();</span><br><span class=\"line\">    expect(result).toBe(expectedValue);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">test(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> result = Bar.prototype._y();</span><br><span class=\"line\">    expect(result).toBe(expectedValue);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>There are many factors we need to consider when developing a test strategy. From the point of view of correct verification based on AC, we should also consider the operation strategy, operating efficiency, writing and maintaining the cost of testing, bugs easy to find and refactoring assurance and other important factors, and should not go to extremes. In the case of ensuring a certain AC, we hope that this E2E/IT3/IT2/IT1/UT can be guaranteed in many ways to the quality of the code and the quality of the project engineering, while being agile enough for continuous delivery.</p>\n"},{"layout":"post","title":"Reading: Working Backwards by Werner Vogels","date":"2018-12-20T12:00:00.000Z","author":"Edward","_content":"\n[Article Link](https://www.allthingsdistributed.com/2006/11/working_backwards.html)\n\n#### Summary:\nWhat is the traditional software release process? Most people will response as flow steps.\n\n- Requirement analysis\n- Requirement review\n- Coding and testing\n- Write FAQ\n- Write press release \n\nMaybe this is not a standard answer, but it’s the basic order…right?\nMost companies use this way to release a product, but is it the best process? Maybe not. Here the author introduced an entirely different way which is called working backwards.\n\nWorking backwards typically has flow steps:\n\n- Write press release\n- Write FAQ\n- Define the customer experience\n- Write the user manual\n\nIt is the opposite of the traditional way. So, what’s the benefits of working backwards? \n\nWhen we write press release, it will make us more clear towards what the product does and why it exists. Then comes FAQ, it’s another chance to define what the product is good for and consider questions our customer may ask. And writing code and testing is easy since we have know our goal unambiguous. Finally the user manual is done naturally.\n\n#### Reflection:\nSo working backwards is goal-oriented and always focus on customer. It can help sort out our goals when we start a project. The importance of goal is self-evident, but most people or company forgot why to start when they go so far. Hope this 'working backwards' may inspire you in your work, thanks.\n\n","source":"_posts/2018-12-20-Reading-Working-Backwards-by-Werner-Vogels.md","raw":"---\nlayout: post\ntitle:  \"Reading: Working Backwards by Werner Vogels\"\ndate:   2018-12-20 20:00:00 +0800\ncategories: readingnote\nauthor: Edward\n---\n\n[Article Link](https://www.allthingsdistributed.com/2006/11/working_backwards.html)\n\n#### Summary:\nWhat is the traditional software release process? Most people will response as flow steps.\n\n- Requirement analysis\n- Requirement review\n- Coding and testing\n- Write FAQ\n- Write press release \n\nMaybe this is not a standard answer, but it’s the basic order…right?\nMost companies use this way to release a product, but is it the best process? Maybe not. Here the author introduced an entirely different way which is called working backwards.\n\nWorking backwards typically has flow steps:\n\n- Write press release\n- Write FAQ\n- Define the customer experience\n- Write the user manual\n\nIt is the opposite of the traditional way. So, what’s the benefits of working backwards? \n\nWhen we write press release, it will make us more clear towards what the product does and why it exists. Then comes FAQ, it’s another chance to define what the product is good for and consider questions our customer may ask. And writing code and testing is easy since we have know our goal unambiguous. Finally the user manual is done naturally.\n\n#### Reflection:\nSo working backwards is goal-oriented and always focus on customer. It can help sort out our goals when we start a project. The importance of goal is self-evident, but most people or company forgot why to start when they go so far. Hope this 'working backwards' may inspire you in your work, thanks.\n\n","slug":"2018-12-20-Reading-Working-Backwards-by-Werner-Vogels","published":1,"updated":"2018-12-26T03:28:06.254Z","comments":1,"photos":[],"link":"","_id":"cjq4mdves000btci5ude6myni","content":"<p><a href=\"https://www.allthingsdistributed.com/2006/11/working_backwards.html\" target=\"_blank\" rel=\"noopener\">Article Link</a></p>\n<h4 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary:\"></a>Summary:</h4><p>What is the traditional software release process? Most people will response as flow steps.</p>\n<ul>\n<li>Requirement analysis</li>\n<li>Requirement review</li>\n<li>Coding and testing</li>\n<li>Write FAQ</li>\n<li>Write press release </li>\n</ul>\n<p>Maybe this is not a standard answer, but it’s the basic order…right?<br>Most companies use this way to release a product, but is it the best process? Maybe not. Here the author introduced an entirely different way which is called working backwards.</p>\n<p>Working backwards typically has flow steps:</p>\n<ul>\n<li>Write press release</li>\n<li>Write FAQ</li>\n<li>Define the customer experience</li>\n<li>Write the user manual</li>\n</ul>\n<p>It is the opposite of the traditional way. So, what’s the benefits of working backwards? </p>\n<p>When we write press release, it will make us more clear towards what the product does and why it exists. Then comes FAQ, it’s another chance to define what the product is good for and consider questions our customer may ask. And writing code and testing is easy since we have know our goal unambiguous. Finally the user manual is done naturally.</p>\n<h4 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection:\"></a>Reflection:</h4><p>So working backwards is goal-oriented and always focus on customer. It can help sort out our goals when we start a project. The importance of goal is self-evident, but most people or company forgot why to start when they go so far. Hope this ‘working backwards’ may inspire you in your work, thanks.</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://www.allthingsdistributed.com/2006/11/working_backwards.html\" target=\"_blank\" rel=\"noopener\">Article Link</a></p>\n<h4 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary:\"></a>Summary:</h4><p>What is the traditional software release process? Most people will response as flow steps.</p>\n<ul>\n<li>Requirement analysis</li>\n<li>Requirement review</li>\n<li>Coding and testing</li>\n<li>Write FAQ</li>\n<li>Write press release </li>\n</ul>\n<p>Maybe this is not a standard answer, but it’s the basic order…right?<br>Most companies use this way to release a product, but is it the best process? Maybe not. Here the author introduced an entirely different way which is called working backwards.</p>\n<p>Working backwards typically has flow steps:</p>\n<ul>\n<li>Write press release</li>\n<li>Write FAQ</li>\n<li>Define the customer experience</li>\n<li>Write the user manual</li>\n</ul>\n<p>It is the opposite of the traditional way. So, what’s the benefits of working backwards? </p>\n<p>When we write press release, it will make us more clear towards what the product does and why it exists. Then comes FAQ, it’s another chance to define what the product is good for and consider questions our customer may ask. And writing code and testing is easy since we have know our goal unambiguous. Finally the user manual is done naturally.</p>\n<h4 id=\"Reflection\"><a href=\"#Reflection\" class=\"headerlink\" title=\"Reflection:\"></a>Reflection:</h4><p>So working backwards is goal-oriented and always focus on customer. It can help sort out our goals when we start a project. The importance of goal is self-evident, but most people or company forgot why to start when they go so far. Hope this ‘working backwards’ may inspire you in your work, thanks.</p>\n"},{"layout":"post","title":"TypeScript intro and migrating","date":"2018-12-25T05:00:00.000Z","author":"Jeff Wu","_content":"\n![](\b/integration-blog/assets/2018-12-25-typescript-intro-and-migrating/babel-ts.jpg)\n\n### Backgound\n\nIt's not easy to build a great project that is easy to maintain. Especially when you are in a large company, you have to work with other members. There are many different opinions and ideas even for the simplest of things. Fortunately we have a lot of talent members in RingCentral. We maintain a high quality in our libraries, widgets and products which we build. But, as the project or requirements increase, more and more issue appear. It's time to prepare our project for facing huge projects in the future with innovations.\n\n\n### Current problems\n\n1. Project scaling\n\n   As described above, more and more source code have been pushed into the projects. There will be a day when our projects grow to enormous sizes. How to make our source code easy to maintain and read, that is the challenge we would have to overcome.\n\n2. Refactoring\n\n   What are the common procedures of refactoring?\n\n   1. Bulk rename functions or property with meaningful names.\n   2. Check the reference counts of functions and properties, and remove if they are unused.\n   3. Extract common logic from functions.\n\n3. Build a great library that is flexible and maintainable.\n\n   Since we also provide our library as open source project for 3rd-party use, the importance of maintaining and scaling the project is much higher than before. TypeScript can make this easier.\n\n4. How to reduce the work of moving from Javascript to TypeScript?\n\n   Apart from the efforts in learning TypeScirpt, we also have to consider how we can maintain our product development velocity.\n\n\n### TypeScript\n\n\"Static types can make it easier to maintain your code by catching bugs early on, making it easier to navigate your projects, giving accurate code completion, and providing handy fixes for when you do make mistakes\", said Microsoft's Daniel Rosenwasser in an introductory [blog post](https://blogs.msdn.microsoft.com/typescript/2017/08/31/announcing-typescript-2-5/).\n\nMicrosoft designed TypeScript with specific architectural parameters in mind allow TypeScript to integrate fully and easily with existing JavaScript code while providing robust feature external to JavaScript. Any valid JavaScript code is valid TypeScript code with only a few exceptions: handing option function parameters and assigning a value to an object literal.\n\nLet's take a look at how to install TypeScript:\n\n```bash\nnpm install typescript\nyarn add typescript\n```\n\nIf you want to install at global instead of local repository, just add `global` and `-g` argument.\n\nAfter Installed, we can refer the [tutorial](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html) from TypeScript document and practice.\n\nBy the tutorial, we can know that advantage of using TypeScript. Static typing is a feature that detects bugs as developers write the scripts. This allows us to write more robust code and maintain it, resulting in better and clean code. Static language helps you implementing SOLID design patterns into a language that doesn't really support it. Innovation and change, also, with safety measures to ensure that it doesn't go completely in the wrong direction. Types make the code more readable. It helps us remember faster what each piece of code is supposed to do. We can add and change the current code faster. With these benefits which using TypeScript, it will more confident for large scaling projects and have a better experience of co-working, then increase the ability of powerful production efficiently.\n\n\n### Migrating\n\nTo migrating with current repositories, we need a smooth progess of migration from ES6 babel. Here are 2 ways I found for smooth migration:\n\n1. Using [react-app-script-ts](https://github.com/wmonk/create-react-app)\n\n   If you want to start without configurating the build setup, this CLI tool is a good choice for you. Just install the CLI tool with NPM, then you can use the command provided by the CLI tool easily. The tool will setup webpack, babel-loader, and ts-loader behind the scenes, and the actual configuration can be found in the node_modules folders. In our scenario, we need to set the configuration by ourselves. We can refer the configuration to know how to config the loaders for our webpack projects.\n\n2. Using [babel-preset-typescript](https://babeljs.io/docs/en/babel-preset-typescript)\n\n   As our current projects use webpack and gulp for automatic processes, using babel-preset-typescript make it possible for JS files and TS files to co-exists and compile in one step.\n\nAlthough these solutions can fully meet our requirements, we still have an issue to resolve - the monorepo that we transferred to recently. Before we can use this setup, we need to upgrade babel to babel v7. However, babel v7 is incompatible with our monorepo setup, in particular, referencing modules from subrepos will fail to use the proper babel configuration from the monorepo. We are still trying to figure out the solution to this problem, and we believe that solving this problem will enable us to use typescript, which is beneficial for our future development with large projects.\n\n\n### Conclusion\n\n1. TS and JS can work together.\n2. TS is widely used for large projects in the industry.\n3. TS is solid community and developer support.\n4. Updating to Babel v7 is the first issue we need to solve.\n\n\n### References\n\n1. [TypeScript in 5 minutes](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html)\n2. [Top TypeScript Advantages](https://apiumhub.com/tech-blog-barcelona/top-typescript-advantages/)\n3. [Migrating a Babel project to TypeScript](https://medium.com/pleo/migrating-a-babel-project-to-typescript-af6cd0b451f4)\n4. [Introduction to TypeScript](https://toddmotto.com/typescript-introduction)\n5. [TypeScript vs JavaScript deep comparison](https://juejin.im/entry/5a52ed336fb9a01cbd586f9f)\n\n","source":"_posts/2018-12-25-typeScript-intro-and-migrating.md","raw":"---\nlayout: post\ntitle:  \"TypeScript intro and migrating\"\ndate:   2018-12-25 13:00:00 +0800\ncategories: blog\nauthor: Jeff Wu\n---\n\n![](\b/integration-blog/assets/2018-12-25-typescript-intro-and-migrating/babel-ts.jpg)\n\n### Backgound\n\nIt's not easy to build a great project that is easy to maintain. Especially when you are in a large company, you have to work with other members. There are many different opinions and ideas even for the simplest of things. Fortunately we have a lot of talent members in RingCentral. We maintain a high quality in our libraries, widgets and products which we build. But, as the project or requirements increase, more and more issue appear. It's time to prepare our project for facing huge projects in the future with innovations.\n\n\n### Current problems\n\n1. Project scaling\n\n   As described above, more and more source code have been pushed into the projects. There will be a day when our projects grow to enormous sizes. How to make our source code easy to maintain and read, that is the challenge we would have to overcome.\n\n2. Refactoring\n\n   What are the common procedures of refactoring?\n\n   1. Bulk rename functions or property with meaningful names.\n   2. Check the reference counts of functions and properties, and remove if they are unused.\n   3. Extract common logic from functions.\n\n3. Build a great library that is flexible and maintainable.\n\n   Since we also provide our library as open source project for 3rd-party use, the importance of maintaining and scaling the project is much higher than before. TypeScript can make this easier.\n\n4. How to reduce the work of moving from Javascript to TypeScript?\n\n   Apart from the efforts in learning TypeScirpt, we also have to consider how we can maintain our product development velocity.\n\n\n### TypeScript\n\n\"Static types can make it easier to maintain your code by catching bugs early on, making it easier to navigate your projects, giving accurate code completion, and providing handy fixes for when you do make mistakes\", said Microsoft's Daniel Rosenwasser in an introductory [blog post](https://blogs.msdn.microsoft.com/typescript/2017/08/31/announcing-typescript-2-5/).\n\nMicrosoft designed TypeScript with specific architectural parameters in mind allow TypeScript to integrate fully and easily with existing JavaScript code while providing robust feature external to JavaScript. Any valid JavaScript code is valid TypeScript code with only a few exceptions: handing option function parameters and assigning a value to an object literal.\n\nLet's take a look at how to install TypeScript:\n\n```bash\nnpm install typescript\nyarn add typescript\n```\n\nIf you want to install at global instead of local repository, just add `global` and `-g` argument.\n\nAfter Installed, we can refer the [tutorial](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html) from TypeScript document and practice.\n\nBy the tutorial, we can know that advantage of using TypeScript. Static typing is a feature that detects bugs as developers write the scripts. This allows us to write more robust code and maintain it, resulting in better and clean code. Static language helps you implementing SOLID design patterns into a language that doesn't really support it. Innovation and change, also, with safety measures to ensure that it doesn't go completely in the wrong direction. Types make the code more readable. It helps us remember faster what each piece of code is supposed to do. We can add and change the current code faster. With these benefits which using TypeScript, it will more confident for large scaling projects and have a better experience of co-working, then increase the ability of powerful production efficiently.\n\n\n### Migrating\n\nTo migrating with current repositories, we need a smooth progess of migration from ES6 babel. Here are 2 ways I found for smooth migration:\n\n1. Using [react-app-script-ts](https://github.com/wmonk/create-react-app)\n\n   If you want to start without configurating the build setup, this CLI tool is a good choice for you. Just install the CLI tool with NPM, then you can use the command provided by the CLI tool easily. The tool will setup webpack, babel-loader, and ts-loader behind the scenes, and the actual configuration can be found in the node_modules folders. In our scenario, we need to set the configuration by ourselves. We can refer the configuration to know how to config the loaders for our webpack projects.\n\n2. Using [babel-preset-typescript](https://babeljs.io/docs/en/babel-preset-typescript)\n\n   As our current projects use webpack and gulp for automatic processes, using babel-preset-typescript make it possible for JS files and TS files to co-exists and compile in one step.\n\nAlthough these solutions can fully meet our requirements, we still have an issue to resolve - the monorepo that we transferred to recently. Before we can use this setup, we need to upgrade babel to babel v7. However, babel v7 is incompatible with our monorepo setup, in particular, referencing modules from subrepos will fail to use the proper babel configuration from the monorepo. We are still trying to figure out the solution to this problem, and we believe that solving this problem will enable us to use typescript, which is beneficial for our future development with large projects.\n\n\n### Conclusion\n\n1. TS and JS can work together.\n2. TS is widely used for large projects in the industry.\n3. TS is solid community and developer support.\n4. Updating to Babel v7 is the first issue we need to solve.\n\n\n### References\n\n1. [TypeScript in 5 minutes](https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html)\n2. [Top TypeScript Advantages](https://apiumhub.com/tech-blog-barcelona/top-typescript-advantages/)\n3. [Migrating a Babel project to TypeScript](https://medium.com/pleo/migrating-a-babel-project-to-typescript-af6cd0b451f4)\n4. [Introduction to TypeScript](https://toddmotto.com/typescript-introduction)\n5. [TypeScript vs JavaScript deep comparison](https://juejin.im/entry/5a52ed336fb9a01cbd586f9f)\n\n","slug":"2018-12-25-typeScript-intro-and-migrating","published":1,"updated":"2018-12-26T03:28:06.253Z","comments":1,"photos":[],"link":"","_id":"cjq4mdveu000ctci5v8pj06ty","content":"<p><img src=\"\b/integration-blog/assets/2018-12-25-typescript-intro-and-migrating/babel-ts.jpg\" alt=\"\"></p>\n<h3 id=\"Backgound\"><a href=\"#Backgound\" class=\"headerlink\" title=\"Backgound\"></a>Backgound</h3><p>It’s not easy to build a great project that is easy to maintain. Especially when you are in a large company, you have to work with other members. There are many different opinions and ideas even for the simplest of things. Fortunately we have a lot of talent members in RingCentral. We maintain a high quality in our libraries, widgets and products which we build. But, as the project or requirements increase, more and more issue appear. It’s time to prepare our project for facing huge projects in the future with innovations.</p>\n<h3 id=\"Current-problems\"><a href=\"#Current-problems\" class=\"headerlink\" title=\"Current problems\"></a>Current problems</h3><ol>\n<li><p>Project scaling</p>\n<p>As described above, more and more source code have been pushed into the projects. There will be a day when our projects grow to enormous sizes. How to make our source code easy to maintain and read, that is the challenge we would have to overcome.</p>\n</li>\n<li><p>Refactoring</p>\n<p>What are the common procedures of refactoring?</p>\n<ol>\n<li>Bulk rename functions or property with meaningful names.</li>\n<li>Check the reference counts of functions and properties, and remove if they are unused.</li>\n<li>Extract common logic from functions.</li>\n</ol>\n</li>\n<li><p>Build a great library that is flexible and maintainable.</p>\n<p>Since we also provide our library as open source project for 3rd-party use, the importance of maintaining and scaling the project is much higher than before. TypeScript can make this easier.</p>\n</li>\n<li><p>How to reduce the work of moving from Javascript to TypeScript?</p>\n<p>Apart from the efforts in learning TypeScirpt, we also have to consider how we can maintain our product development velocity.</p>\n</li>\n</ol>\n<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><p>“Static types can make it easier to maintain your code by catching bugs early on, making it easier to navigate your projects, giving accurate code completion, and providing handy fixes for when you do make mistakes”, said Microsoft’s Daniel Rosenwasser in an introductory <a href=\"https://blogs.msdn.microsoft.com/typescript/2017/08/31/announcing-typescript-2-5/\" target=\"_blank\" rel=\"noopener\">blog post</a>.</p>\n<p>Microsoft designed TypeScript with specific architectural parameters in mind allow TypeScript to integrate fully and easily with existing JavaScript code while providing robust feature external to JavaScript. Any valid JavaScript code is valid TypeScript code with only a few exceptions: handing option function parameters and assigning a value to an object literal.</p>\n<p>Let’s take a look at how to install TypeScript:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install typescript</span><br><span class=\"line\">yarn add typescript</span><br></pre></td></tr></table></figure>\n<p>If you want to install at global instead of local repository, just add <code>global</code> and <code>-g</code> argument.</p>\n<p>After Installed, we can refer the <a href=\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\" target=\"_blank\" rel=\"noopener\">tutorial</a> from TypeScript document and practice.</p>\n<p>By the tutorial, we can know that advantage of using TypeScript. Static typing is a feature that detects bugs as developers write the scripts. This allows us to write more robust code and maintain it, resulting in better and clean code. Static language helps you implementing SOLID design patterns into a language that doesn’t really support it. Innovation and change, also, with safety measures to ensure that it doesn’t go completely in the wrong direction. Types make the code more readable. It helps us remember faster what each piece of code is supposed to do. We can add and change the current code faster. With these benefits which using TypeScript, it will more confident for large scaling projects and have a better experience of co-working, then increase the ability of powerful production efficiently.</p>\n<h3 id=\"Migrating\"><a href=\"#Migrating\" class=\"headerlink\" title=\"Migrating\"></a>Migrating</h3><p>To migrating with current repositories, we need a smooth progess of migration from ES6 babel. Here are 2 ways I found for smooth migration:</p>\n<ol>\n<li><p>Using <a href=\"https://github.com/wmonk/create-react-app\" target=\"_blank\" rel=\"noopener\">react-app-script-ts</a></p>\n<p>If you want to start without configurating the build setup, this CLI tool is a good choice for you. Just install the CLI tool with NPM, then you can use the command provided by the CLI tool easily. The tool will setup webpack, babel-loader, and ts-loader behind the scenes, and the actual configuration can be found in the node_modules folders. In our scenario, we need to set the configuration by ourselves. We can refer the configuration to know how to config the loaders for our webpack projects.</p>\n</li>\n<li><p>Using <a href=\"https://babeljs.io/docs/en/babel-preset-typescript\" target=\"_blank\" rel=\"noopener\">babel-preset-typescript</a></p>\n<p>As our current projects use webpack and gulp for automatic processes, using babel-preset-typescript make it possible for JS files and TS files to co-exists and compile in one step.</p>\n</li>\n</ol>\n<p>Although these solutions can fully meet our requirements, we still have an issue to resolve - the monorepo that we transferred to recently. Before we can use this setup, we need to upgrade babel to babel v7. However, babel v7 is incompatible with our monorepo setup, in particular, referencing modules from subrepos will fail to use the proper babel configuration from the monorepo. We are still trying to figure out the solution to this problem, and we believe that solving this problem will enable us to use typescript, which is beneficial for our future development with large projects.</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><ol>\n<li>TS and JS can work together.</li>\n<li>TS is widely used for large projects in the industry.</li>\n<li>TS is solid community and developer support.</li>\n<li>Updating to Babel v7 is the first issue we need to solve.</li>\n</ol>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><ol>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\" target=\"_blank\" rel=\"noopener\">TypeScript in 5 minutes</a></li>\n<li><a href=\"https://apiumhub.com/tech-blog-barcelona/top-typescript-advantages/\" target=\"_blank\" rel=\"noopener\">Top TypeScript Advantages</a></li>\n<li><a href=\"https://medium.com/pleo/migrating-a-babel-project-to-typescript-af6cd0b451f4\" target=\"_blank\" rel=\"noopener\">Migrating a Babel project to TypeScript</a></li>\n<li><a href=\"https://toddmotto.com/typescript-introduction\" target=\"_blank\" rel=\"noopener\">Introduction to TypeScript</a></li>\n<li><a href=\"https://juejin.im/entry/5a52ed336fb9a01cbd586f9f\" target=\"_blank\" rel=\"noopener\">TypeScript vs JavaScript deep comparison</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"\b/integration-blog/assets/2018-12-25-typescript-intro-and-migrating/babel-ts.jpg\" alt=\"\"></p>\n<h3 id=\"Backgound\"><a href=\"#Backgound\" class=\"headerlink\" title=\"Backgound\"></a>Backgound</h3><p>It’s not easy to build a great project that is easy to maintain. Especially when you are in a large company, you have to work with other members. There are many different opinions and ideas even for the simplest of things. Fortunately we have a lot of talent members in RingCentral. We maintain a high quality in our libraries, widgets and products which we build. But, as the project or requirements increase, more and more issue appear. It’s time to prepare our project for facing huge projects in the future with innovations.</p>\n<h3 id=\"Current-problems\"><a href=\"#Current-problems\" class=\"headerlink\" title=\"Current problems\"></a>Current problems</h3><ol>\n<li><p>Project scaling</p>\n<p>As described above, more and more source code have been pushed into the projects. There will be a day when our projects grow to enormous sizes. How to make our source code easy to maintain and read, that is the challenge we would have to overcome.</p>\n</li>\n<li><p>Refactoring</p>\n<p>What are the common procedures of refactoring?</p>\n<ol>\n<li>Bulk rename functions or property with meaningful names.</li>\n<li>Check the reference counts of functions and properties, and remove if they are unused.</li>\n<li>Extract common logic from functions.</li>\n</ol>\n</li>\n<li><p>Build a great library that is flexible and maintainable.</p>\n<p>Since we also provide our library as open source project for 3rd-party use, the importance of maintaining and scaling the project is much higher than before. TypeScript can make this easier.</p>\n</li>\n<li><p>How to reduce the work of moving from Javascript to TypeScript?</p>\n<p>Apart from the efforts in learning TypeScirpt, we also have to consider how we can maintain our product development velocity.</p>\n</li>\n</ol>\n<h3 id=\"TypeScript\"><a href=\"#TypeScript\" class=\"headerlink\" title=\"TypeScript\"></a>TypeScript</h3><p>“Static types can make it easier to maintain your code by catching bugs early on, making it easier to navigate your projects, giving accurate code completion, and providing handy fixes for when you do make mistakes”, said Microsoft’s Daniel Rosenwasser in an introductory <a href=\"https://blogs.msdn.microsoft.com/typescript/2017/08/31/announcing-typescript-2-5/\" target=\"_blank\" rel=\"noopener\">blog post</a>.</p>\n<p>Microsoft designed TypeScript with specific architectural parameters in mind allow TypeScript to integrate fully and easily with existing JavaScript code while providing robust feature external to JavaScript. Any valid JavaScript code is valid TypeScript code with only a few exceptions: handing option function parameters and assigning a value to an object literal.</p>\n<p>Let’s take a look at how to install TypeScript:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install typescript</span><br><span class=\"line\">yarn add typescript</span><br></pre></td></tr></table></figure>\n<p>If you want to install at global instead of local repository, just add <code>global</code> and <code>-g</code> argument.</p>\n<p>After Installed, we can refer the <a href=\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\" target=\"_blank\" rel=\"noopener\">tutorial</a> from TypeScript document and practice.</p>\n<p>By the tutorial, we can know that advantage of using TypeScript. Static typing is a feature that detects bugs as developers write the scripts. This allows us to write more robust code and maintain it, resulting in better and clean code. Static language helps you implementing SOLID design patterns into a language that doesn’t really support it. Innovation and change, also, with safety measures to ensure that it doesn’t go completely in the wrong direction. Types make the code more readable. It helps us remember faster what each piece of code is supposed to do. We can add and change the current code faster. With these benefits which using TypeScript, it will more confident for large scaling projects and have a better experience of co-working, then increase the ability of powerful production efficiently.</p>\n<h3 id=\"Migrating\"><a href=\"#Migrating\" class=\"headerlink\" title=\"Migrating\"></a>Migrating</h3><p>To migrating with current repositories, we need a smooth progess of migration from ES6 babel. Here are 2 ways I found for smooth migration:</p>\n<ol>\n<li><p>Using <a href=\"https://github.com/wmonk/create-react-app\" target=\"_blank\" rel=\"noopener\">react-app-script-ts</a></p>\n<p>If you want to start without configurating the build setup, this CLI tool is a good choice for you. Just install the CLI tool with NPM, then you can use the command provided by the CLI tool easily. The tool will setup webpack, babel-loader, and ts-loader behind the scenes, and the actual configuration can be found in the node_modules folders. In our scenario, we need to set the configuration by ourselves. We can refer the configuration to know how to config the loaders for our webpack projects.</p>\n</li>\n<li><p>Using <a href=\"https://babeljs.io/docs/en/babel-preset-typescript\" target=\"_blank\" rel=\"noopener\">babel-preset-typescript</a></p>\n<p>As our current projects use webpack and gulp for automatic processes, using babel-preset-typescript make it possible for JS files and TS files to co-exists and compile in one step.</p>\n</li>\n</ol>\n<p>Although these solutions can fully meet our requirements, we still have an issue to resolve - the monorepo that we transferred to recently. Before we can use this setup, we need to upgrade babel to babel v7. However, babel v7 is incompatible with our monorepo setup, in particular, referencing modules from subrepos will fail to use the proper babel configuration from the monorepo. We are still trying to figure out the solution to this problem, and we believe that solving this problem will enable us to use typescript, which is beneficial for our future development with large projects.</p>\n<h3 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h3><ol>\n<li>TS and JS can work together.</li>\n<li>TS is widely used for large projects in the industry.</li>\n<li>TS is solid community and developer support.</li>\n<li>Updating to Babel v7 is the first issue we need to solve.</li>\n</ol>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><ol>\n<li><a href=\"https://www.typescriptlang.org/docs/handbook/typescript-in-5-minutes.html\" target=\"_blank\" rel=\"noopener\">TypeScript in 5 minutes</a></li>\n<li><a href=\"https://apiumhub.com/tech-blog-barcelona/top-typescript-advantages/\" target=\"_blank\" rel=\"noopener\">Top TypeScript Advantages</a></li>\n<li><a href=\"https://medium.com/pleo/migrating-a-babel-project-to-typescript-af6cd0b451f4\" target=\"_blank\" rel=\"noopener\">Migrating a Babel project to TypeScript</a></li>\n<li><a href=\"https://toddmotto.com/typescript-introduction\" target=\"_blank\" rel=\"noopener\">Introduction to TypeScript</a></li>\n<li><a href=\"https://juejin.im/entry/5a52ed336fb9a01cbd586f9f\" target=\"_blank\" rel=\"noopener\">TypeScript vs JavaScript deep comparison</a></li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjq4mdveb0000tci559jiv6id","category_id":"cjq4mdvej0002tci59loytxff","_id":"cjq4mdver0009tci5tz59fys7"},{"post_id":"cjq4mdvep0007tci54ygqpoko","category_id":"cjq4mdveo0006tci5uxoklsma","_id":"cjq4mdvev000dtci59er0lt71"},{"post_id":"cjq4mdveg0001tci54tz9g8ta","category_id":"cjq4mdveo0006tci5uxoklsma","_id":"cjq4mdvew000ftci5r3ox6ajm"},{"post_id":"cjq4mdveq0008tci58ow32iia","category_id":"cjq4mdveo0006tci5uxoklsma","_id":"cjq4mdvex000gtci5s9jtf9d4"},{"post_id":"cjq4mdves000btci5ude6myni","category_id":"cjq4mdvej0002tci59loytxff","_id":"cjq4mdvex000htci5n36jaw78"},{"post_id":"cjq4mdvem0004tci5ony3jo1a","category_id":"cjq4mdveo0006tci5uxoklsma","_id":"cjq4mdvex000itci5v435ulyz"},{"post_id":"cjq4mdveu000ctci5v8pj06ty","category_id":"cjq4mdveo0006tci5uxoklsma","_id":"cjq4mdvex000jtci56r1wvf58"},{"post_id":"cjq4mdveo0005tci5ezt6dv11","category_id":"cjq4mdveo0006tci5uxoklsma","_id":"cjq4mdvex000ktci5exixj2qc"}],"PostTag":[],"Tag":[]}}